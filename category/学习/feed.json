{
    "version": "https://jsonfeed.org/version/1",
    "title": "スポンジ・ボブです • All posts by \"学习\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/02/10/JAVA%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/",
            "url": "http://example.com/2022/02/10/JAVA%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/",
            "title": "JAVA的反射机制",
            "date_published": "2022-02-10T11:15:28.000Z",
            "content_html": "<h3 id=\"什么是java的反射机制\"><a class=\"markdownIt-Anchor\" href=\"#什么是java的反射机制\">#</a> 什么是 JAVA 的反射机制</h3>\n<p>JAVA 反射就是在运行状态中，对于任意一个类都可以知道这个类的所有属性和方法；对于任何一个对象都能调用它的属性和方法，这种动态的调用对象的方法、获取类的信息的功能称为 JAVA 语言的反射机制。</p>\n<h3 id=\"实现反射机制的三种方法\"><a class=\"markdownIt-Anchor\" href=\"#实现反射机制的三种方法\">#</a> 实现反射机制的三种方法</h3>\n<p>定义一个类 Student</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @Classname Student</span><br><span class=\"line\"> * @Description 学生类</span><br><span class=\"line\"> * @Date 2022/2/8 19:08</span><br><span class=\"line\"> * @Author wbl</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Student &#123;</span><br><span class=\"line\">    public String name;</span><br><span class=\"line\">    public String sex;</span><br><span class=\"line\">    public Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void study()&#123;</span><br><span class=\"line\">        System.out.println(&quot;学生要学习&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>通过创建对象</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void getClass1()&#123;</span><br><span class=\"line\">    Student student = new Student();</span><br><span class=\"line\">    Class&lt;? extends Student&gt; studentClass = student.getClass();</span><br><span class=\"line\">    System.out.println(&quot;*******方法1*******&quot;);</span><br><span class=\"line\">    System.out.println(studentClass);</span><br><span class=\"line\">    System.out.println(Arrays.toString(studentClass.getFields()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>通过相对路径</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void getClass2()&#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        Class&lt;?&gt; studentClass = Class.forName(&quot;com.study.reflex.Student&quot;);</span><br><span class=\"line\">        System.out.println(&quot;*******方法2*******&quot;);</span><br><span class=\"line\">        System.out.println(studentClass);</span><br><span class=\"line\">        System.out.println(Arrays.toString(studentClass.getFields()));</span><br><span class=\"line\">    &#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>通过类名</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void getClass3()&#123;</span><br><span class=\"line\">    Class&lt;Student&gt; studentClass = Student.class;</span><br><span class=\"line\">    System.out.println(&quot;*******方法3*******&quot;);</span><br><span class=\"line\">    System.out.println(studentClass);</span><br><span class=\"line\">    System.out.println(Arrays.toString(studentClass.getFields()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"应用场景\"><a class=\"markdownIt-Anchor\" href=\"#应用场景\">#</a> 应用场景</h3>\n<ol>\n<li>加载数据库驱动</li>\n<li>获取对象的属性方法类及其构造方法</li>\n<li>instanceof 关键字</li>\n<li>编译器如 IDEA 的。之后的弹出</li>\n<li>Spring 框架的一些 xmd 装配</li>\n</ol>\n<h3 id=\"反射的优缺点\"><a class=\"markdownIt-Anchor\" href=\"#反射的优缺点\">#</a> 反射的优缺点</h3>\n<ol>\n<li>代码灵活性</li>\n<li>性能差一点</li>\n</ol>\n",
            "tags": [
                "JAVA"
            ]
        }
    ]
}