{
    "version": "https://jsonfeed.org/version/1",
    "title": "スポンジ・ボブです",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/12/24/hello-world/",
            "url": "http://example.com/2023/12/24/hello-world/",
            "title": "Hello World",
            "date_published": "2023-12-24T08:35:05.867Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/02/10/JAVA%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/",
            "url": "http://example.com/2022/02/10/JAVA%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/",
            "title": "JAVA的反射机制",
            "date_published": "2022-02-10T11:15:28.000Z",
            "content_html": "<h3 id=\"什么是java的反射机制\"><a class=\"markdownIt-Anchor\" href=\"#什么是java的反射机制\">#</a> 什么是 JAVA 的反射机制</h3>\n<p>JAVA 反射就是在运行状态中，对于任意一个类都可以知道这个类的所有属性和方法；对于任何一个对象都能调用它的属性和方法，这种动态的调用对象的方法、获取类的信息的功能称为 JAVA 语言的反射机制。</p>\n<h3 id=\"实现反射机制的三种方法\"><a class=\"markdownIt-Anchor\" href=\"#实现反射机制的三种方法\">#</a> 实现反射机制的三种方法</h3>\n<p>定义一个类 Student</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @Classname Student</span><br><span class=\"line\"> * @Description 学生类</span><br><span class=\"line\"> * @Date 2022/2/8 19:08</span><br><span class=\"line\"> * @Author wbl</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Student &#123;</span><br><span class=\"line\">    public String name;</span><br><span class=\"line\">    public String sex;</span><br><span class=\"line\">    public Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void study()&#123;</span><br><span class=\"line\">        System.out.println(&quot;学生要学习&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>通过创建对象</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void getClass1()&#123;</span><br><span class=\"line\">    Student student = new Student();</span><br><span class=\"line\">    Class&lt;? extends Student&gt; studentClass = student.getClass();</span><br><span class=\"line\">    System.out.println(&quot;*******方法1*******&quot;);</span><br><span class=\"line\">    System.out.println(studentClass);</span><br><span class=\"line\">    System.out.println(Arrays.toString(studentClass.getFields()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>通过相对路径</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void getClass2()&#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        Class&lt;?&gt; studentClass = Class.forName(&quot;com.study.reflex.Student&quot;);</span><br><span class=\"line\">        System.out.println(&quot;*******方法2*******&quot;);</span><br><span class=\"line\">        System.out.println(studentClass);</span><br><span class=\"line\">        System.out.println(Arrays.toString(studentClass.getFields()));</span><br><span class=\"line\">    &#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>通过类名</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void getClass3()&#123;</span><br><span class=\"line\">    Class&lt;Student&gt; studentClass = Student.class;</span><br><span class=\"line\">    System.out.println(&quot;*******方法3*******&quot;);</span><br><span class=\"line\">    System.out.println(studentClass);</span><br><span class=\"line\">    System.out.println(Arrays.toString(studentClass.getFields()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"应用场景\"><a class=\"markdownIt-Anchor\" href=\"#应用场景\">#</a> 应用场景</h3>\n<ol>\n<li>加载数据库驱动</li>\n<li>获取对象的属性方法类及其构造方法</li>\n<li>instanceof 关键字</li>\n<li>编译器如 IDEA 的。之后的弹出</li>\n<li>Spring 框架的一些 xmd 装配</li>\n</ol>\n<h3 id=\"反射的优缺点\"><a class=\"markdownIt-Anchor\" href=\"#反射的优缺点\">#</a> 反射的优缺点</h3>\n<ol>\n<li>代码灵活性</li>\n<li>性能差一点</li>\n</ol>\n",
            "tags": [
                "JAVA"
            ]
        },
        {
            "id": "http://example.com/2022/02/08/%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82CloseableHttpAsyncClient%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "http://example.com/2022/02/08/%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82CloseableHttpAsyncClient%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "异步请求CloseableHttpAsyncClient的使用",
            "date_published": "2022-02-08T10:33:09.000Z",
            "content_html": "<h3 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h3>\n<p>最近项目有个小需求，需要发送短信验证码，而我们用的短信发送平台是由其他机构提供的，我们只能通过请求前置机并由前置机进行 nginx 转发来调用实际短信平台的 WebService 服务。<br>\n由于验证码不会影响业务逻辑，因此我这里开始采用的时异步 http 请求，也就是使用的 httpclient 在 4.0 后提供新的 api CloseableHttpAsyncClient。</p>\n<h3 id=\"关于网络调用类型\"><a class=\"markdownIt-Anchor\" href=\"#关于网络调用类型\">#</a> 关于网络调用类型</h3>\n<ol>\n<li>传统 BIO<br>\n 同步阻塞式 IO，一个连接一个线程，客户端有连接请求时服务器端就需要启动一个线程进行处理</li>\n<li>NIO(NOT-Blocking IO)<br>\n 同步非阻塞式 IO，一个请求一个线程</li>\n<li>AIO<br>\n 异步非阻塞式 IO，服务器实现模式为一个有效请求一个线程</li>\n</ol>\n<h3 id=\"closeablehttpasyncclient的使用\"><a class=\"markdownIt-Anchor\" href=\"#closeablehttpasyncclient的使用\">#</a> CloseableHttpAsyncClient 的使用</h3>\n<blockquote>\n<p>CloseableHttpAsyncClient 是 apache 在 4.0 后提供 AIO 操作的 api</p>\n</blockquote>\n<ol>\n<li>pom 引入 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\"> &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class=\"line\"> &lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class=\"line\"> &lt;version&gt;4.5.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\"> &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class=\"line\"> &lt;artifactId&gt;httpcore&lt;/artifactId&gt;</span><br><span class=\"line\"> &lt;version&gt;4.4.5&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\"> &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class=\"line\"> &lt;artifactId&gt;httpcore-nio&lt;/artifactId&gt;</span><br><span class=\"line\"> &lt;version&gt;4.4.5&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\"> &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class=\"line\"> &lt;artifactId&gt;httpasyncclient&lt;/artifactId&gt;</span><br><span class=\"line\"> &lt;version&gt;4.1.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n</li>\n<li>定义 AsynHttpClient 类</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.dhc.leapower.business.rygl.utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.http.client.config.RequestConfig;</span><br><span class=\"line\">import org.apache.http.client.methods.HttpPost;</span><br><span class=\"line\">import org.apache.http.entity.ContentType;</span><br><span class=\"line\">import org.apache.http.entity.StringEntity;</span><br><span class=\"line\">import org.apache.http.impl.nio.client.CloseableHttpAsyncClient;</span><br><span class=\"line\">import org.apache.http.impl.nio.client.HttpAsyncClients;</span><br><span class=\"line\">import org.apache.http.impl.nio.conn.PoolingNHttpClientConnectionManager;</span><br><span class=\"line\">import org.apache.http.impl.nio.reactor.DefaultConnectingIOReactor;</span><br><span class=\"line\">import org.apache.http.impl.nio.reactor.IOReactorConfig;</span><br><span class=\"line\">import org.apache.http.nio.reactor.ConnectingIOReactor;</span><br><span class=\"line\">import org.apache.http.nio.reactor.IOReactorException;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author baolei.wei</span><br><span class=\"line\"> * @title: AsynHttpClient</span><br><span class=\"line\"> * @projectName leapower-business-rygl</span><br><span class=\"line\"> * @description:</span><br><span class=\"line\"> * @date 2022/1/24 12:55</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class AsynHttpClient &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static CloseableHttpAsyncClient client = null;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static CloseableHttpAsyncClient getHttpClient() &#123;</span><br><span class=\"line\">        if (client == null) &#123;</span><br><span class=\"line\">            synchronized (AsynHttpClient.class) &#123;</span><br><span class=\"line\">                if (client == null) &#123;</span><br><span class=\"line\">                    RequestConfig requestConfig = RequestConfig.custom()</span><br><span class=\"line\">                            //连接超时,连接建立时间,三次握手完成时间</span><br><span class=\"line\">                            .setConnectTimeout(2000)</span><br><span class=\"line\">                            //请求超时,数据传输过程中数据包之间间隔的最大时间</span><br><span class=\"line\">                            .setSocketTimeout(2000)</span><br><span class=\"line\">                            //使用连接池来管理连接,从连接池获取连接的超时时间</span><br><span class=\"line\">                            .setConnectionRequestTimeout(20000)</span><br><span class=\"line\">                            .build();</span><br><span class=\"line\"></span><br><span class=\"line\">                    //配置io线程</span><br><span class=\"line\">                    IOReactorConfig ioReactorConfig = IOReactorConfig.custom().</span><br><span class=\"line\">                            setIoThreadCount(Runtime.getRuntime().availableProcessors())</span><br><span class=\"line\">                            .setSoKeepAlive(true)</span><br><span class=\"line\">                            .build();</span><br><span class=\"line\">                    //设置连接池大小</span><br><span class=\"line\">                    ConnectingIOReactor ioReactor = null;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        ioReactor = new DefaultConnectingIOReactor(ioReactorConfig);</span><br><span class=\"line\">                    &#125; catch (IOReactorException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    PoolingNHttpClientConnectionManager connManager = new PoolingNHttpClientConnectionManager(ioReactor);</span><br><span class=\"line\">                    //最大连接数设置1</span><br><span class=\"line\">                    connManager.setMaxTotal(5);</span><br><span class=\"line\">                    //per route最大连接数设置</span><br><span class=\"line\">                    connManager.setDefaultMaxPerRoute(5);</span><br><span class=\"line\"></span><br><span class=\"line\">                    client = HttpAsyncClients.custom()</span><br><span class=\"line\">                            .setConnectionManager(connManager)</span><br><span class=\"line\">                            .setDefaultRequestConfig(requestConfig)</span><br><span class=\"line\">                            .build();</span><br><span class=\"line\">                    client.start();</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return client;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static HttpPost getPostBody(String urls, String bodys, ContentType contentType) &#123;</span><br><span class=\"line\">        HttpPost post = null;</span><br><span class=\"line\">        StringEntity entity = null;</span><br><span class=\"line\">        post = new HttpPost(urls);</span><br><span class=\"line\">        entity = new StringEntity(bodys, contentType);</span><br><span class=\"line\">        post.setEntity(entity);</span><br><span class=\"line\">        return post;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>实际应用</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 生成验证码</span><br><span class=\"line\"> */</span><br><span class=\"line\">@ApiOperation(value = &quot;新建&quot;, notes = &quot;&quot;)</span><br><span class=\"line\">@RequestMapping(value = &quot;/create&quot;, method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)</span><br><span class=\"line\">public RestDTO&lt;Void&gt; create(@RequestBody JSONObject tel) &#123;</span><br><span class=\"line\">    String code = this.identifyingCode(6);</span><br><span class=\"line\">    //像手机发送验证码</span><br><span class=\"line\">    CloseableHttpAsyncClient httpClient = AsynHttpClient.getHttpClient();</span><br><span class=\"line\">    //短信平台前置机的ip与WebService 服务方法</span><br><span class=\"line\">    String url = &quot;http://127.0.0.1:60001/login&quot;;</span><br><span class=\"line\">    JSONObject parameter = new JSONObject();</span><br><span class=\"line\"></span><br><span class=\"line\">    parameter.put(&quot;accountName&quot;,&quot;admin&quot;);</span><br><span class=\"line\">    parameter.put(&quot;password&quot;,&quot;123456&quot;);</span><br><span class=\"line\">    String stringBody = JSONObject.toJSONString(parameter);</span><br><span class=\"line\"></span><br><span class=\"line\">    HttpPost httpPost = new HttpPost(url);</span><br><span class=\"line\">    StringEntity entity = new StringEntity(stringBody, ContentType.APPLICATION_JSON);</span><br><span class=\"line\">    httpPost.setEntity(entity);</span><br><span class=\"line\"></span><br><span class=\"line\">    FutureCallback&lt;HttpResponse&gt; callback = new FutureCallback&lt;HttpResponse&gt;() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void completed(HttpResponse result) &#123;</span><br><span class=\"line\">            HttpEntity entity = result.getEntity();</span><br><span class=\"line\">            InputStream stream = null;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                stream = entity.getContent();</span><br><span class=\"line\">            &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            String string = changeInputStream(stream, &quot;utf-8&quot;);</span><br><span class=\"line\">            System.out.println(&quot;-----------&quot; + string + &quot;-----------&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void failed(Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            System.err.println(&quot;失败：&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void cancelled() &#123;</span><br><span class=\"line\">            System.err.println(&quot;cancelled&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    httpClient.execute(httpPost,callback);</span><br><span class=\"line\">    verificationCodeCacheService.add(tel.get(&quot;tel&quot;).toString(),code);</span><br><span class=\"line\">    return RestDTO.success();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "网络"
            ]
        },
        {
            "id": "http://example.com/2022/01/22/el-cascader-%E7%BA%A7%E8%81%94%E9%80%89%E6%8B%A9%E5%99%A8%E8%8E%B7%E5%8F%96value%E4%B8%8Elabel/",
            "url": "http://example.com/2022/01/22/el-cascader-%E7%BA%A7%E8%81%94%E9%80%89%E6%8B%A9%E5%99%A8%E8%8E%B7%E5%8F%96value%E4%B8%8Elabel/",
            "title": "el-cascader 级联选择器获取value与label",
            "date_published": "2022-01-22T01:40:19.000Z",
            "content_html": "<p>在使用 element-ui 的 el-cascader 级联选择器时，我想在 @change 函数中获取当前选中的 value 与 label 值，但是使用的原有参数只能获取 value 值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-form-item</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;省市地区：&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-cascader</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">ref</span>=<span class=\"string\">&quot;cityCascader&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">&quot;width:100%&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;comeAddress&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:props</span>=<span class=\"string\">&quot;optionProps&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:options</span>=<span class=\"string\">&quot;cityOptions&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">filterable</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">clearable</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">change</span>=<span class=\"string\">&quot;handleCityChange&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-cascader</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以使用 <mark>that.$refs[“cityCascader”].getCheckedNodes()[0].pathLabels</mark> 函数来获取当前的 label 值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">handleCityChange</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> that = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> labels = that.<span class=\"property\">$refs</span>[<span class=\"string\">&quot;cityCascader&quot;</span>].<span class=\"title function_\">getCheckedNodes</span>()[<span class=\"number\">0</span>].<span class=\"property\">pathLabels</span>;</span><br><span class=\"line\">  that.<span class=\"property\">model</span>.<span class=\"property\">cityName</span> = labels[<span class=\"number\">0</span>] + <span class=\"string\">&quot;/&quot;</span> + labels[<span class=\"number\">1</span>];</span><br><span class=\"line\">  that.<span class=\"property\">comeAddress</span> = value;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>",
            "tags": [
                "VUE"
            ]
        },
        {
            "id": "http://example.com/2022/01/04/HmacSHA256%E4%BD%BF%E7%94%A8%E5%AE%8C%E6%88%90%E7%AD%BE%E5%90%8D%E8%AE%A4%E8%AF%81/",
            "url": "http://example.com/2022/01/04/HmacSHA256%E4%BD%BF%E7%94%A8%E5%AE%8C%E6%88%90%E7%AD%BE%E5%90%8D%E8%AE%A4%E8%AF%81/",
            "title": "HmacSHA256使用完成签名认证",
            "date_published": "2022-01-04T10:54:28.000Z",
            "content_html": "<ol>\n<li>背景</li>\n</ol>\n<p>在业务中我想将某些业务功能放开到白名单中，这样使用的时候就需要用户额外登录，但是直接放开到白名单中可能会存在安全隐患，尤其是其中国有部分业务涉及到数据库的操作，因此我的想法是在前端的请求头中添加一个签名，在后端添加一个 Filter 来校验签名是否正确，在这里选择的是 HmacSHA256 的签名加密方法。</p>\n<ol start=\"2\">\n<li>前端代码</li>\n</ol>\n<blockquote>\n<p>由于业务逻辑较为简单，因此我的签名校验只包含一个时间以及随机数来确保前端请求是来自合法的网站就行。</p>\n</blockquote>\n<ul>\n<li>\n<p><strong>安装依赖</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install crypto-js</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>引入依赖</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import CryptoJS from &quot;crypto-js&quot;;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>在封装 axios 的 js 文件中为 headers 添加三个属性</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import axios from &quot;axios&quot;;</span><br><span class=\"line\">const instance = axios.create(&#123;</span><br><span class=\"line\">    baseURL: &#x27;/&#x27;,</span><br><span class=\"line\">    timeout: 6000</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">instance.defaults.headers.common[&#x27;valid_time&#x27;] = &quot;&quot;;</span><br><span class=\"line\">instance.defaults.headers.common[&#x27;valid_random&#x27;] = &quot;&quot;;</span><br><span class=\"line\">instance.defaults.headers.common[&#x27;valid_sign&#x27;] = &quot;&quot;;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>在前端实际业务请求前设置参数</strong></p>\n<blockquote>\n<p>其中 secretKey 为密钥，需前后端一致，在前段的请求头中添加参数</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let that = this;</span><br><span class=\"line\">let headers = &#123;&#125;;</span><br><span class=\"line\">headers.valid_time = new Date().getTime();</span><br><span class=\"line\">headers.valid_random = that.getRandomInt(10000);</span><br><span class=\"line\">let hash = CryptoJS.HmacSHA256(</span><br><span class=\"line\">    headers.valid_time + &quot;&quot; + headers.valid_random,</span><br><span class=\"line\">    that.secretKey</span><br><span class=\"line\">).toString();</span><br><span class=\"line\">headers.valid_sign = hash;</span><br><span class=\"line\">that.postRequest(url,param,&#123; headers: headers &#125;)</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"3\">\n<li>后端代码</li>\n</ol>\n<ul>\n<li>\n<p><strong>后端代码添加 Filter 类来验证需要签名的路径</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Slf4j</span><br><span class=\"line\">@WebFilter(filterName = &quot;signFilter&quot;,urlPatterns = &#123;&quot;demo/first&quot;,&quot;demo/sec&#125;)</span><br><span class=\"line\">public class SignFilter implements Filter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**签名生成器，将前端带来的时间与随机数用秘钥加密*/</span><br><span class=\"line\">    private String hmacSHA256(String secretKey, String plain)&#123;</span><br><span class=\"line\">        String hash = &quot;&quot;;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Mac sha256_HMAC = Mac.getInstance(&quot;HmacSHA256&quot;);</span><br><span class=\"line\">            SecretKeySpec secret_key = new SecretKeySpec(secretKey.getBytes(), &quot;HmacSHA256&quot;);</span><br><span class=\"line\">            sha256_HMAC.init(secret_key);</span><br><span class=\"line\">            byte[] bytes = sha256_HMAC.doFinal(plain.getBytes());</span><br><span class=\"line\">            hash = byteArrayToHexString(bytes);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            System.out.println(&quot;Error HmacSHA256 ===========&quot; + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return hash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private  String byteArrayToHexString(byte[] b) &#123;</span><br><span class=\"line\">        StringBuilder hs = new StringBuilder();</span><br><span class=\"line\">        String stmp;</span><br><span class=\"line\">        for (int n = 0; b != null &amp;&amp; n &lt; b.length; n++) &#123;</span><br><span class=\"line\">            stmp = Integer.toHexString(b[n] &amp; 0XFF);</span><br><span class=\"line\">            if (stmp.length() == 1) &#123;</span><br><span class=\"line\">                hs.append(&#x27;0&#x27;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            hs.append(stmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return hs.toString().toUpperCase();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class=\"line\">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class=\"line\">        HttpServletResponse response= (HttpServletResponse) servletResponse;</span><br><span class=\"line\">        String requestUrl = request.getRequestURI();</span><br><span class=\"line\">        /*获取请求头中的参数*/</span><br><span class=\"line\">        String time = request.getHeader(this.VALID_TIME);</span><br><span class=\"line\">        String random = request.getHeader(this.VALID_RANDOM);</span><br><span class=\"line\">        String sign = request.getHeader(this.VALID_SIGN);</span><br><span class=\"line\">        /*编写实际校验代码*/</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"4\">\n<li>注意事项</li>\n</ol>\n<p>在使用 @WebFilter (filterName = “signFilter”,urlPatterns = {“demo/first”,&quot;demo/sec}) 的时候，有时候会出现 urlPatterns 属性失效的情况，可能由于 filterName 属性首字母大写引起的，改为小写。</p>\n",
            "tags": [
                "JAVA",
                "HmacSHA"
            ]
        },
        {
            "id": "http://example.com/2021/12/30/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8ELinux%E7%9B%AE%E5%BD%95%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3/",
            "url": "http://example.com/2021/12/30/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8ELinux%E7%9B%AE%E5%BD%95%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3/",
            "title": "远程登录Linux服务器与Linux目录的初步了解",
            "date_published": "2021-12-30T10:04:05.000Z",
            "content_html": "<blockquote>\n<p>在之前的文章中，完成了 VMWare 与 Centos7.6 的安装，我可以通过实际操作直接操作 Linux 系统，但是在实际的工作中却并不是这样的，我们的 Linux 服务器可能远在万里之外，所以我们一般是通过远程登录来操作 Linux 服务器。常用的工具有 XShell 与 MobaXterm 等，因为 Xshell 提供免费的非商用资格，因此我在学习中使用的是 Xshell 与 Xftp 工具。</p>\n</blockquote>\n<h4 id=\"工具准备\"><a class=\"markdownIt-Anchor\" href=\"#工具准备\">#</a> 工具准备</h4>\n<ol>\n<li>下载安装 Xshell 和 Xftp6 的安装包:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmV0c2FyYW5nLmNvbS9lbi9mcmVlLWZvci1ob21lLXNjaG9vbC8=\"> 下载地址</span></li>\n</ol>\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E4%B8%8E%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%2Fxshell%E4%B8%8B%E8%BD%BD.png\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">XSHELL与XFTP提供免费的非商用资格，选择Both，并选择DOWNLOAD</div>\n</center>\n<ol start=\"2\">\n<li>获取 Linux 服务器的 IP 地址，并确定主机与其能 ping 通。</li>\n</ol>\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E4%B8%8E%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%2FLinux%E7%9A%84ip%E5%9C%B0%E5%9D%80.png\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">Linux下查看IP地址的命令：ifconfig</div>\n</center>\n<ol start=\"3\">\n<li>使用 XSHELL 连接 Linux 服务器进行远程登录</li>\n</ol>\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E4%B8%8E%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%2Fxshell%E6%96%B0%E5%BB%BA%E4%BC%9A%E8%AF%9D.png\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">输入主机IP进行连接</div>\n</center>\n<ol start=\"4\">\n<li>使用 Xftp 进行远程文件的上传与下载，Xftp 与 Xshell 的连接操作是一样的，不过需要注意的是 XFTP 可能存在中文乱码的问题，将编码格式选择为 UTF-8 之后可以解决</li>\n</ol>\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E4%B8%8E%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%2FXftp%E7%9A%84%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98.png\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">点击小地球，选择UTF-8</div>\n</center>\n<h4 id=\"linux目录结构\"><a class=\"markdownIt-Anchor\" href=\"#linux目录结构\">#</a> Linux 目录结构</h4>\n<blockquote>\n<p>Linux 的文件系统是采用级层式的树状目录结构，在此结构中的最上层是根目录 &quot;/&quot;，然后再此目录下创建其他目录。<br>\n下面是根目录下的一些常用目录，可以大体了解一下每个目录的作用，在 Linux 的世界里，一切皆文件。</p>\n</blockquote>\n<ul>\n<li>/bin:Binary 的缩写，存放常用命令</li>\n<li>/sbin:s-Super User 系统管理员使用的系统管理程序</li>\n<li>/home: 存放普通用户的目录，每个 Linux 用户都有一个自己的目录，一般是用户名命名</li>\n<li>/root: 系统管理员目录</li>\n<li>/lib: 系统开机所需要的动态链接共享库，类似于 DLL 文件</li>\n<li>/lost+found：一般情况是空的，当系统非法关机后，这里就会出现文件</li>\n<li>/etc：系统管理所需要的配置文件与子目录，my.conf</li>\n<li>/user：用户的应用程序目录，类似 windows 下的 Program files</li>\n<li>/boot：系统启动的一些核心文件，包括一些连接文件与镜像文件</li>\n<li>/proc：虚拟目录，系统内存的映射，访问此系统来获取系统的信息</li>\n<li>/tmp: 存放临时文件</li>\n<li>/dev：类似设备管理器，所有硬件用文件的形式存储</li>\n<li>/mnt：用来做挂载的文件，比如共享文件夹</li>\n<li>/opt：给主机额外安装软件所存放的目录</li>\n<li>/var：存放很多变化的东西，最经典的就是日志</li>\n</ul>\n<h4 id=\"vi与vim的基础使用\"><a class=\"markdownIt-Anchor\" href=\"#vi与vim的基础使用\">#</a> vi 与 vim 的基础使用</h4>\n<blockquote>\n<p>Linux 系统会内置 vi 文本编译器<br>\n Vim 具有程序编辑的能力，可以看做 vi 的增强版本</p>\n</blockquote>\n<ol>\n<li>vi 与 vim 的三种模式</li>\n</ol>\n<ul>\n<li>一般 / 正常模式：一般打开的默认模式</li>\n<li>插入模式：输入 i ,o ,a 可以进入插入模式</li>\n<li>命令行 / 底行模式：提供相关指令，完成读取、存盘、替换、离开 vim、显示行号等动作</li>\n</ul>\n<ol start=\"2\">\n<li>vim 一些常用快捷键\n<ul>\n<li><kbd>yy</kbd>+<kbd>p</kbd>:yy 拷贝当前行，p 粘贴，一般模式下</li>\n<li><kbd>5yy</kbd>+<kbd>p</kbd>: 拷贝当前行向下的五行，p 粘贴，一般模式下</li>\n<li><kbd>dd</kbd>: 删除当前行，一般模式下</li>\n<li><kbd>5dd</kbd>: 删除当前行向下的五行，一般模式下</li>\n<li><kbd>/ 关键字</kbd>+<kbd>回车</kbd> 查找，命令行下</li>\n<li><kbd>set nu</kbd>+<kbd>set nonu</kbd> 设置行数与取消行数，命令行下</li>\n<li><kbd>G</kbd> 一般模式下，到文档的最末尾</li>\n<li><kbd>gg</kbd> 一般模式下，但文档的首页</li>\n<li><kbd>u</kbd> 一般模式下，撤销刚才的动作</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "http://example.com/2021/12/27/VMware%E4%B8%8ECentos%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/",
            "url": "http://example.com/2021/12/27/VMware%E4%B8%8ECentos%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/",
            "title": "VMware与Centos安装步骤与虚拟机配置",
            "date_published": "2021-12-27T10:45:44.000Z",
            "content_html": "<h2 id=\"准备阶段\"><a class=\"markdownIt-Anchor\" href=\"#准备阶段\">#</a> 准备阶段</h2>\n<blockquote>\n<p>提前下载 VMware 安装包与 Centos 的镜像文件</p>\n</blockquote>\n<ul>\n<li>Centos 下载的是 Centos7.6 版本，<span class=\"exturl\" data-url=\"aHR0cHM6Ly92YXVsdC5jZW50b3Mub3JnLzcuNi4xODEwL2lzb3MveDg2XzY0Lw==\">Centos 下载地址</span></li>\n<li>VMware 下载的是 16.1 版本，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudm13YXJlLmNvbS9wcm9kdWN0cy93b3Jrc3RhdGlvbi1wcm8vd29ya3N0YXRpb24tcHJvLWV2YWx1YXRpb24uaHRtbA==\">VMware 下载地址</span></li>\n<li>Vmware 一般是有一个月的免费试用期的，<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy41MjB4aWF6YWkuY29tL3NvZnQvVk13YXJlLVdvcmtzdGF0aW9uLTE2Lmh0bWw=\">VMware 秘钥</span></li>\n</ul>\n<h2 id=\"vmware安装与虚拟机新建\"><a class=\"markdownIt-Anchor\" href=\"#vmware安装与虚拟机新建\">#</a> VMware 安装与虚拟机新建</h2>\n<ol>\n<li><strong>Vmware 的安装</strong><br>\n VMware 安装包傻瓜式安装，一直下一步到程序安装完成。</li>\n<li><strong>新建虚拟机与配置</strong><br>\n安装成后打开 VMware，文件 -&gt; 新建虚拟机，选择典型配置，然后跟随向导进行配置，需要注意的是需要在虚拟机设置的时候选择合适的配置，下面是我的安装向导配置。</li>\n</ol>\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/VMware%E4%B8%8ECentos%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE/%E9%85%8D%E7%BD%AE.png\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">选择典型</div>\n</center>\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/VMware%E4%B8%8ECentos%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE/%E5%90%91%E5%AF%BC.png\">\n</center>\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/VMware%E4%B8%8ECentos%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE/%E5%90%91%E5%AF%BC1.png\">\n</center>\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/VMware%E4%B8%8ECentos%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%2F%E5%90%91%E5%AF%BC3.png\">\n</center>\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/VMware%E4%B8%8ECentos%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%2F%E5%90%91%E5%AF%BC4.png\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">根据向导进行基础配置</div>\n</center>\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/VMware%E4%B8%8ECentos%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%2F%E5%90%91%E5%AF%BC6.png\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">进行虚拟机的配置</div>\n</center>\n<p><mark>首先根据自己的主机 cpu 核数来为虚拟机分配处理器；<br>\n在网络选项的时候会存在三种网络连接方式，这个选择 NAT, 至于三者区别会在文章后序介绍；<br>\n 在使用 ISO 映像文件的时候选择提前下载好的 Centos7 的映像文件。</mark></p>\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/VMware%E4%B8%8ECentos%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%2F%E5%90%91%E5%AF%BC7.png\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">配置完成后运行虚拟机，开始虚拟机其他配置，首先install Centos7</div>\n</center>\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/VMware%E4%B8%8ECentos%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%2F%E5%90%91%E5%AF%BC8.png\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">选择操作系统的语言</div>\n</center>\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/VMware%E4%B8%8ECentos%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%2F%E5%90%91%E5%AF%BC9.png\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">选择完语言之后进行系统软件的安装配置，在软件选择这里我们不用最小的默认安装，因为最小安装是默认没有图形界面和gcc等开发环境的，因此我们按照图中的选择进行选择，默认安装gcc等开发环境</div>\n</center>\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/VMware%E4%B8%8ECentos%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%2F%E5%90%91%E5%AF%BC10.png\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">使用Linux操作系统最后自己进行一下系统的分区，选择我要配置分区</div>\n</center>\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/VMware%E4%B8%8ECentos%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%2F%E5%90%91%E5%AF%BC11.png\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">这是一般的分区配置，这个在文章后序会有讲到</div>\n</center>\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/VMware%E4%B8%8ECentos%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%2F%E5%90%91%E5%AF%BC12.png\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">最后设置root角色的密码，同时最好在创建一个普通用户</div>\n</center>\n<h2 id=\"虚拟机新建注意问题\"><a class=\"markdownIt-Anchor\" href=\"#虚拟机新建注意问题\">#</a> 虚拟机新建注意问题</h2>\n<ol>\n<li>\n<p><strong>Linux 网络连接的三种方式</strong></p>\n<ul>\n<li><strong>桥接模式</strong>： 虚拟系统与主机网段相同，虚拟机可以直接连通其他主机，但是容易引起 ip 冲突。</li>\n<li><strong>NAT 模式</strong>： 网络地址转换，虚拟系统与外部通讯并且不引起 ip 冲突，参考公司的服务器的内外服务器结构。</li>\n<li><strong>主机模式</strong>：独立系统，不与外部通讯</li>\n</ul>\n</li>\n<li>\n<p><strong>一般 Linux 分区</strong></p>\n<ul>\n<li><strong>boot 分区</strong>：引导分区，一般是 1G</li>\n<li><strong>swap 分区</strong>：交换分区，一般与分配内存大小一致，<mark>swap 分区可以临时充当内存</mark></li>\n<li><strong>root 分区</strong>：根分区，剩余内存</li>\n</ul>\n</li>\n<li>\n<p><strong>KDUMP</strong><br>\nKDUMP 是内核崩溃转储机制，内核崩溃的时候将系统数据捕获下来，生产环境需要开启，学习就不开了。</p>\n</li>\n</ol>\n<h2 id=\"虚拟机的基础操作\"><a class=\"markdownIt-Anchor\" href=\"#虚拟机的基础操作\">#</a> 虚拟机的基础操作</h2>\n<ol>\n<li>\n<p><strong>虚拟机克隆</strong></p>\n<ul>\n<li>直接拷贝一份安装好的虚拟机文件：在创建虚拟机的时候会指定本地目录，直接拷贝本地文件</li>\n<li>使用 VM 进行克隆操作（先关闭需要克隆的 Linux 系统）\n<ul>\n<li>创建链接克隆：对原虚拟机的引用，需要原虚拟机可以访问，内存需求较少</li>\n<li>创建完整克隆：完整克隆原虚拟机，但是桥接方式连接网络的话 ip 也会被克隆过去</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>虚拟机快照</strong><br>\n<mark>使用虚拟机系统的时候，想要回到原先的某一个状态，可以通过 vmware 的快照管理，用游戏的存档读档来理解</mark><br>\n右键虚拟机选择快照选项，有快照与快照管理功能，如下图。</p>\n</li>\n</ol>\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/VMware%E4%B8%8ECentos%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%2F%E5%BF%AB%E7%85%A7.png\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">快照不是越多越好，快照会磁盘空间</div>\n</center>\n<ol start=\"3\">\n<li><strong>虚拟机的迁移与删除</strong></li>\n</ol>\n<p>VM 中的虚拟机本质就是文件，文件或文件夹整体拷贝与删除，也可以用 vm 提供的移除功能</p>\n<ol start=\"4\">\n<li><strong>VMTools 的使用</strong>\n<ul>\n<li><strong>安装 vmtools</strong>：安装可以根据可视化操作来进行安装或者利用压缩包来安装\n<ul>\n<li>将 VMwareTools-10.3.23-16594550.tar.gz 压缩包复制到 /opt 目录下进行解压，进入解压后的目录，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS12bXdhcmUtaW5zdGFsbC00eDkzYnM4OWQucGw=\">运行 vmware-install.pl</span></li>\n</ul>\n</li>\n<li><strong>设置共享文件夹</strong>：在主机单独设置一个文件夹作为主机与虚拟机的交换区，并在虚拟机的设置中将共享文件夹设置为该文件夹</li>\n</ul>\n</li>\n</ol>\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/VMware%E4%B8%8ECentos%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%2F%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9.png\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">我在主机的D盘设置了一个叫做VMShare的文件夹作为共享文件夹</div>\n</center>\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/VMware%E4%B8%8ECentos%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE%2F%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9Linux.png\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">在主机中新建一个txt文件，可以在虚拟机的这个路径来查看共享的文件</div>\n</center>\n<p><mark>注意：这个使用 vmtools 来进行共享文件要用 root 账户来进行操作，复制普通用户是看不到共享文件夹的，如果 root 账户也看不到的话，可以在设置里将共享文件夹禁用在开启</mark></p>\n",
            "tags": [
                "VMware",
                "Linux"
            ]
        },
        {
            "id": "http://example.com/2021/12/20/el-table%E5%8A%A8%E6%80%81%E5%88%97%E5%AF%BC%E8%87%B4%E6%95%B0%E6%8D%AE%E9%94%99%E4%BD%8D%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/",
            "url": "http://example.com/2021/12/20/el-table%E5%8A%A8%E6%80%81%E5%88%97%E5%AF%BC%E8%87%B4%E6%95%B0%E6%8D%AE%E9%94%99%E4%BD%8D%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/",
            "title": "el-table动态列导致数据错位问题解决",
            "date_published": "2021-12-20T11:12:12.000Z",
            "content_html": "<h2 id=\"问题描述\"><a class=\"markdownIt-Anchor\" href=\"#问题描述\">#</a> 问题描述</h2>\n<pre><code>使用elementUI的el-table做列表动态列控制的时候，出现了表格列数据错位的样式bug，如下图所示。\n</code></pre>\n<div style=\"float:left;border:solid1px000;margin:20px,20px;\">\n<img data-src=https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/table%E5%8A%A8%E6%80%81%E5%88%97%E5%AF%BC%E8%87%B4%E6%95%B0%E6%8D%AE%E9%94%99%E4%BD%8D%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E5%8A%A8%E6%80%81.PNG />\n</div>\n<div style=\"float:left;border:solid1px000;margin:20px,20px;\">\n<img data-src=https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/table%E5%8A%A8%E6%80%81%E5%88%97%E5%AF%BC%E8%87%B4%E6%95%B0%E6%8D%AE%E9%94%99%E4%BD%8D%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E5%88%97%E9%94%99%E4%BD%8D%E6%A0%B7%E5%BC%8F1.PNG />\n</div>\n<div style=\"float:left;border:solid1px000;margin:20px,20px;\">\n<img data-src=https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/table%E5%8A%A8%E6%80%81%E5%88%97%E5%AF%BC%E8%87%B4%E6%95%B0%E6%8D%AE%E9%94%99%E4%BD%8D%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E5%88%97%E9%94%99%E4%BD%8D%E6%A0%B7%E5%BC%8F2.PNG />\n</div>\n<pre><code>第一张图片中的来源数据错位到后一列，第二张图中服务分类列宽度足够而数据却不显示\n</code></pre>\n<h2 id=\"原因分析\"><a class=\"markdownIt-Anchor\" href=\"#原因分析\">#</a> 原因分析</h2>\n<blockquote>\n<p>在这里先上一下这个 table 的配置代码</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-table-column</span><br><span class=\"line\">:show-overflow-tooltip=&quot;tdWrap&quot;</span><br><span class=\"line\">:align=&quot;x.align&quot;</span><br><span class=\"line\">:header-align=&quot;x.headerAlign&quot;</span><br><span class=\"line\">:key=&quot;idx&quot;</span><br><span class=\"line\">:label=&quot;x.name&quot;</span><br><span class=\"line\">:prop=&quot;x.sortModel&quot;</span><br><span class=\"line\">:width=&quot;x.width&quot;</span><br><span class=\"line\">:min-width=&quot;x.minWidth&quot;</span><br><span class=\"line\">:fixed=&quot;x.fixed ? x.fixed : false&quot;</span><br><span class=\"line\">v-for=&quot;(x,idx) in tableHeader&quot;</span><br><span class=\"line\">v-if=&quot;x.hidden&quot;</span><br><span class=\"line\">:sortable=&quot;x.sort === true ? &#x27;custom&#x27; : false&quot;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>通过 F12 可以看出来，错位的列使用的 css 宽度样式实际上是被隐藏的前置列</p>\n</blockquote>\n<div style=\"float:left;border:solid1px000;margin:20px,20px;\">\n<img data-src=https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/table%E5%8A%A8%E6%80%81%E5%88%97%E5%AF%BC%E8%87%B4%E6%95%B0%E6%8D%AE%E9%94%99%E4%BD%8D%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E5%85%83%E7%B4%A01.PNG />\n</div>\n<div style=\"float:left;border:solid1px000;margin:20px,20px;\">\n<img data-src=https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/table%E5%8A%A8%E6%80%81%E5%88%97%E5%AF%BC%E8%87%B4%E6%95%B0%E6%8D%AE%E9%94%99%E4%BD%8D%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E5%85%83%E7%B4%A02.PNG />\n</div>\n<pre><code>这个问题其实是由v-if引起的，我们一般控制页面元素显示都是采用v-if或者v-show。\n其中两者的不同在于v-if是在dom树中将元素删除，而v-show是将元素的display属性置为none。\n在el-table中我简单的使用index来做了v-for循环中的key值，这个导致了不同的列可能会使用到相同的key值，这个导致了列渲染到其他列的宽度。\n</code></pre>\n<h2 id=\"解决方案\"><a class=\"markdownIt-Anchor\" href=\"#解决方案\">#</a> 解决方案</h2>\n<ul>\n<li>通过随机数来为 v-for 的 key 值赋值，这样保证动态列每次删除或者重新生成不会出现相同的 key 值。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-table-column</span><br><span class=\"line\">:show-overflow-tooltip=&quot;tdWrap&quot;</span><br><span class=\"line\">:align=&quot;x.align&quot;</span><br><span class=\"line\">:header-align=&quot;x.headerAlign&quot;</span><br><span class=\"line\">:key=&quot;x.field+&#x27;&#x27;+Math.random()&quot;</span><br><span class=\"line\">:label=&quot;x.name&quot;</span><br><span class=\"line\">:prop=&quot;x.sortModel&quot;</span><br><span class=\"line\">:width=&quot;x.width&quot;</span><br><span class=\"line\">:min-width=&quot;x.minWidth&quot;</span><br><span class=\"line\">:fixed=&quot;x.fixed ? x.fixed : false&quot;</span><br><span class=\"line\">v-for=&quot;x in activeTableHeader&quot;</span><br><span class=\"line\">:sortable=&quot;x.sort === true ? &#x27;custom&#x27; : false&quot;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    activeTableHeader: function() &#123;</span><br><span class=\"line\">        return this.tableHeader.filter(function(header) &#123;</span><br><span class=\"line\">            return !header.hidden;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>&gt; 在这个代码里同时优化了v-for与v-if同时使用的问题，这个是参照官方文档通过计算属性将原有的v-for与v-if进行了优化\n</code></pre>\n",
            "tags": [
                "Element",
                "Bug"
            ]
        },
        {
            "id": "http://example.com/2021/12/16/element%E8%A1%A8%E6%A0%BC%E7%BB%84%E4%BB%B6%E6%BB%9A%E5%8A%A8%E6%9D%A1%E9%81%AE%E6%8C%A1%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2021/12/16/element%E8%A1%A8%E6%A0%BC%E7%BB%84%E4%BB%B6%E6%BB%9A%E5%8A%A8%E6%9D%A1%E9%81%AE%E6%8C%A1%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/",
            "title": "element表格组件滚动条遮挡数据问题",
            "date_published": "2021-12-16T11:24:07.000Z",
            "content_html": "<h2 id=\"问题描述\"><a class=\"markdownIt-Anchor\" href=\"#问题描述\">#</a> 问题描述</h2>\n<p>最近在工作中经常使用 ElementUI 的表格组件，发现如果 EL-TABLE 组件的 EL-TABLE-COLUMN 加了 FIXED 属性列固定后样式后会出现高度错乱问题，这样会导致表格数据有被遮挡，bug 样式及代码如下</p>\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/el-table%E5%86%BB%E7%BB%93%E5%88%97%E5%AF%BC%E8%87%B4%E9%94%99%E4%BD%8D%E9%97%AE%E9%A2%98/bug.PNG\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">BUG截图</div>\n</center>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-table</span><br><span class=\"line\">  v-loading=&quot;loading&quot;</span><br><span class=\"line\">  :data=&quot;configurationData&quot;</span><br><span class=\"line\">  :row-class-name=&quot;configurationRowClassName&quot;</span><br><span class=\"line\">  @selection-change=&quot;configurationDetailSelectionChange&quot;</span><br><span class=\"line\">  stripe</span><br><span class=\"line\">  style=&quot;width: 100%&quot;</span><br><span class=\"line\">  ref=&quot;configurationTb&quot;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &lt;el-table-column fixed=&quot;left&quot; type=&quot;selection&quot; width=&quot;30&quot; align=&quot;center&quot; /&gt;</span><br><span class=\"line\">  &lt;el-table-column label=&quot;id&quot; prop=&quot;id&quot; v-if=&quot;false&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">  &lt;el-table-column</span><br><span class=\"line\">    fixed=&quot;left&quot;</span><br><span class=\"line\">    label=&quot;序号&quot;</span><br><span class=\"line\">    align=&quot;center&quot;</span><br><span class=\"line\">    prop=&quot;xh&quot;</span><br><span class=\"line\">    width=&quot;50&quot;</span><br><span class=\"line\">  &gt;&lt;/el-table-column</span><br><span class=\"line\">&gt;&lt;/el-table&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题分析\"><a class=\"markdownIt-Anchor\" href=\"#问题分析\">#</a> 问题分析</h2>\n<p>经过排查基本可以确定这个样式 bug 是因为 el-table 同时存在冻结列与滚动条导致的。<br>\n在列加入冻结列，即 <strong>fixed=“right”</strong> 或者<strong> fixed=“left”</strong> 之后，页面会增加缓存，再次切换回来就会导致高度没有计算 padding 值所有会出现高度错乱的问题，这样数据便会被遮挡。</p>\n<h2 id=\"解决方法\"><a class=\"markdownIt-Anchor\" href=\"#解决方法\">#</a> 解决方法</h2>\n<p>增加一个样式重新计算这部分高度来覆盖原有的样式</p>\n<ul>\n<li>创建一个新的 css 文件 tableFixed.css</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 解决存在冻结列导致最后一行数据被遮挡问题 */ </span><br><span class=\"line\">.el-table__fixed,</span><br><span class=\"line\">.el-table__fixed-right &#123; height: 100% !important; &#125; </span><br><span class=\"line\">.el-table__fixed,</span><br><span class=\"line\">.el-table__fixed-left &#123; height: 100% !important; &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在 main.js 中全局引入</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//引入样式文件 </span><br><span class=\"line\">import &#x27;../static/css/tableFixed.css&#x27;</span><br></pre></td></tr></table></figure>\n<p>修改后列表操作列最后一行成功显示完全</p>\n<h2 id=\"引申问题\"><a class=\"markdownIt-Anchor\" href=\"#引申问题\">#</a> 引申问题</h2>\n<p>冻结列与侧边滚动条会引起冻结列的错位，如下图的操作列与数据都出现了错位现象</p>\n<center class = \"half\">\n<img src = https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/el-table%E5%86%BB%E7%BB%93%E5%88%97%E5%AF%BC%E8%87%B4%E9%94%99%E4%BD%8D%E9%97%AE%E9%A2%98/%E8%A1%A8%E6%A0%BC%E9%94%99%E4%BD%8D1.PNG  width = \"50%\" height=\"330px\" align = left>\n<img src = https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/el-table%E5%86%BB%E7%BB%93%E5%88%97%E5%AF%BC%E8%87%B4%E9%94%99%E4%BD%8D%E9%97%AE%E9%A2%98/%E8%A1%A8%E6%A0%BC%E9%94%99%E4%BD%8D2.PNG  width = \"50%\" height=\"330px\" align = right>\n</center>\n<p>其实这是因为 elementui 的 table 组件的滚动条在 window 环境下会默认显示，这个为滚动条预留的宽度导致数据发生了错位，我们可以去查看 element 下的源码关于 table 的滚动条宽度是怎么计算的</p>\n<ul>\n<li>elementui 中 table 组件关于滚动条定义的部分源码</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;rightFixedColumns.length &gt; 0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-mousewheel</span>=<span class=\"string\">&quot;handleFixedMousewheel&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">&quot;el-table__fixed-right&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">ref</span>=<span class=\"string\">&quot;rightFixedWrapper&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:style</span>=<span class=\"string\">&quot;[&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    width: layout.rightFixedWidth ? layout.rightFixedWidth + &#x27;px&#x27; : &#x27;&#x27;,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    right: layout.scrollY ? (border ? layout.gutterWidth : (layout.gutterWidth || 0)) + &#x27;px&#x27; : &#x27;&#x27;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">  fixedHeight]&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>其中主要的宽度由 gutterWidth 控制，通过查找 table-layout.js 可以找到 gutterWidth 的定义方式</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.gutterWidth = scrollbarWidth();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>最后找到 scrollbar-width.js 来找到滚动条的实际实现方法</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &#x27;vue&#x27;;</span><br><span class=\"line\">let scrollBarWidth;</span><br><span class=\"line\">export default function() &#123;</span><br><span class=\"line\">  if (Vue.prototype.$isServer) return 0;</span><br><span class=\"line\">  if (scrollBarWidth !== undefined) return scrollBarWidth;</span><br><span class=\"line\"></span><br><span class=\"line\">  const outer = document.createElement(&#x27;div&#x27;);</span><br><span class=\"line\">  outer.className = &#x27;el-scrollbar__wrap&#x27;;</span><br><span class=\"line\">  outer.style.visibility = &#x27;hidden&#x27;;</span><br><span class=\"line\">  outer.style.width = &#x27;100px&#x27;;</span><br><span class=\"line\">  outer.style.position = &#x27;absolute&#x27;;</span><br><span class=\"line\">  outer.style.top = &#x27;-9999px&#x27;;</span><br><span class=\"line\">  document.body.appendChild(outer);</span><br><span class=\"line\"></span><br><span class=\"line\">  const widthNoScroll = outer.offsetWidth;</span><br><span class=\"line\">  outer.style.overflow = &#x27;scroll&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">  const inner = document.createElement(&#x27;div&#x27;);</span><br><span class=\"line\">  inner.style.width = &#x27;100%&#x27;;</span><br><span class=\"line\">  outer.appendChild(inner);</span><br><span class=\"line\"></span><br><span class=\"line\">  const widthWithScroll = inner.offsetWidth;</span><br><span class=\"line\">  outer.parentNode.removeChild(outer);</span><br><span class=\"line\">  scrollBarWidth = widthNoScroll - widthWithScroll;</span><br><span class=\"line\"></span><br><span class=\"line\">  return scrollBarWidth;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其实最终实现的方法很简单粗暴，首先创建了一个外部 outer 的 div，并强制让其出现滚动条，然后创建一个内部 inner 的 div，通过 <strong>scrollBarWidth = widthNoScroll - widthWithScroll;</strong> 来计算出滚动条的宽度。<br>\n因此我们只需要控制返回的 <strong>scrollBarWidth</strong> 为 0 就可以解决这个问题，我们从代码中也可以看出来我们需要修改的样式为 <strong>el-scrollbar__wrap</strong> ，同样的在刚刚的 tableFixed.css 文件中加入如下的样式代码。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 解决操作栏按钮错位问题 */</span><br><span class=\"line\">.el-table__body-wrapper::-webkit-scrollbar &#123;</span><br><span class=\"line\">  width: 15px;</span><br><span class=\"line\">  height: 15px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.el-table__body-wrapper::-webkit-scrollbar-thumb &#123;</span><br><span class=\"line\">  background-color: #ddd;</span><br><span class=\"line\">  border-radius: 3px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.el-scrollbar__wrap::-webkit-scrollbar &#123;</span><br><span class=\"line\">  width: 15px;</span><br><span class=\"line\">  height: 15px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样刚刚计算公式计算出的结果就是 0px，也就不会出现为滚动条预留位置而导致的错位问题了。</p>\n",
            "tags": [
                "Element",
                "Bug"
            ]
        }
    ]
}