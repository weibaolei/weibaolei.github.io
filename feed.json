{
    "version": "https://jsonfeed.org/version/1",
    "title": "スポンジ・ボブです",
    "subtitle": "",
    "icon": "http://weiboluo.top/images/favicon.ico",
    "description": "",
    "home_page_url": "http://weiboluo.top",
    "items": [
        {
            "id": "http://weiboluo.top/2023/12/25/dockerNetwork/",
            "url": "http://weiboluo.top/2023/12/25/dockerNetwork/",
            "title": "Docker网络模式介绍",
            "date_published": "2023-12-25T10:33:09.000Z",
            "content_html": "<h2 id=\"docker网络模式\"><a class=\"anchor\" href=\"#docker网络模式\">#</a> Docker 网络模式</h2>\n<blockquote>\n<p>Docker 安装之后会自动创建三种基本网络，同时 docker 允许用户进行创建自己的网络配置从而使容器网络配置更加灵活</p>\n</blockquote>\n<h3 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h3>\n<p>Docker 安装完成后可以使用 docker network ls 命令查询创建的网络模式，结果如下图会自动创建三种网络模式：bridge、host、none</p>\n<p><img data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/DockerNetwork/BaseNetworkConfig.jpg?q-sign-algorithm=sha1&amp;q-ak=AKIDWN0SbJrm57Z66Prz2tyITVb8EWLzpO9ZXIHoixT9wmv2IG6wOoFRrA8JMyTfZ4EB&amp;q-sign-time=1703502188;1703505788&amp;q-key-time=1703502188;1703505788&amp;q-header-list=host&amp;q-url-param-list=ci-process&amp;q-signature=57e9f2ae426d50e065df8615f1a644cc700ec738&amp;x-cos-security-token=5c6aDdyNvU5r2dQzTQyiZBItL2RJriYa090b214fddda78a937e80941c75094e9cE677DX9WQ7vNPDZTj_LtzQ_6b7kmN80JCuCSHM6Nm-lacDSMwfkBGizWLKqHZ__PPbc9-QMqhjReZQb21tfLkaiQks37oS94GPLBGwqpFRq-2RmLlempu_zl1CJA6UhQBRxXUUQYjed6xRJ4vK6JOoH7f0mdi_hfj90VBEEBiCZl2Zr99LzaqOB2f1GsD8r&amp;ci-process=originImage\" alt=\"网络模式\" title=\"网络模式\" /></p>\n<p>同时 Docker 在启动时会开启一个虚拟的网桥设备 docker0，并且会为其配置默认的地址 172.17.0.1/16，后续所有的 Docker 容器启动后都会被桥接到 docker0 上面，并自动分配一个 ip 地址，我们可以用 ip addr 命令查询下详情信息</p>\n<p><img data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/DockerNetwork/docker0.jpg?q-sign-algorithm=sha1&amp;q-ak=AKIDuZufiGgOCkIYXtfRp5zn3Cvv14PC2RAqxf7xpFnyYunfy5OgvL1HsPZJLq2m96JX&amp;q-sign-time=1703502214;1703505814&amp;q-key-time=1703502214;1703505814&amp;q-header-list=host&amp;q-url-param-list=ci-process&amp;q-signature=f0fd7eed6535a3ac149758ee2e9cbebb58103806&amp;x-cos-security-token=5c6aDdyNvU5r2dQzTQyiZBItL2RJriYa8b73b89e942c62f07539ca70f27e6cb6cE677DX9WQ7vNPDZTj_Lt3zmm2f7QsDKI6DIgKut5oLSCENGcMI7eo_1lFOyY4B9DxylXxsMQtcH0eT82G3K1z0aRVLLGDDeOIEAOb4Aq6xXOBkuc7JEE9yHR6ZQ5TT3myj5XrZ8qbuKqA9SM4jhh8rRTK8rAcgxbz-0RQGaMSi6AeoYC0lk2ROTi-MZup8F&amp;ci-process=originImage\" alt=\"虚拟设备docker0\" title=\"虚拟设备docker0\" /></p>\n<h3 id=\"bridge模式\"><a class=\"anchor\" href=\"#bridge模式\">#</a> bridge 模式</h3>\n<blockquote>\n<p><strong>bridge 网络模式下的容器没有公有 ip，只有宿主机可以访问，而外部主机无法访问，但是可以通过配置 NAT 规则进行访问</strong></p>\n</blockquote>\n<ul>\n<li>\n<p>bridge 模式的实现依赖的是<strong> veth-pair</strong> 技术，veth-pair 可以理解为在宿主机上面创建两个虚拟网络接口，通过技术特性保证无论哪个 veth 接收到网络报文都会传输给另一方</p>\n</li>\n<li>\n<p>如图，Docker Daemon 将 veth0 附加到 docker0 创建的 docker0 设备上，同时将 veth1 添加到 Docker Container 所属的 namespace 上，改名为 eth0</p>\n<p><img data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/DockerNetwork/vethpair.jpg?q-sign-algorithm=sha1&amp;q-ak=AKIDp2r0yTy8N9Js3-UEX607Ok9wQr9D8MmVC-fdeohiZ0Qa7_e7oTTWx2bhLH0SEoRd&amp;q-sign-time=1703502228;1703505828&amp;q-key-time=1703502228;1703505828&amp;q-header-list=host&amp;q-url-param-list=ci-process&amp;q-signature=e34627ab6c3464ce4571e1de9cceb4e70d2ef94a&amp;x-cos-security-token=5c6aDdyNvU5r2dQzTQyiZBItL2RJriYa9cad0a98dc19b8185e101ff5f27eb6edcE677DX9WQ7vNPDZTj_Lt4tIS0pV1hUwsD9c1Gmx8me_1DNW2w1RbJcrU6pOiBqs0ByPFMZpVcvYr8LgQJ-TjdSMkRnBkr05sVTRHE6uijIOV85glol1gv44kDCAk4dDjTK4BKrdNSl6TebioIpfdiaLd0mBgKr-DOk-1C48nWqs-3lhTIAIoU5xM82j5ZSS&amp;ci-process=originImage\" alt=\"veth-pair\" title=\"veth-pair\" /></p>\n</li>\n<li>\n<p>宿主机的网络报文若发往 veth0，则立即会被 eth0 接收，实现宿主机到 Docker Container 网络的联通性；同时，也保证 Docker Container 单独使用 eth0，实现容器网络环境的隔离性</p>\n</li>\n</ul>\n<p><img data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/DockerNetwork/bridge.jpg?q-sign-algorithm=sha1&amp;q-ak=AKID1Wn-KGWw9QlnYWImMeeqekn7-g3Lt5E8BRA0CW8TZ2XpEOhO3b-YvVitVLkAtKo1&amp;q-sign-time=1703502238;1703505838&amp;q-key-time=1703502238;1703505838&amp;q-header-list=host&amp;q-url-param-list=ci-process&amp;q-signature=4488481f914de5d0af457433dc4e06bb0743f93f&amp;x-cos-security-token=5c6aDdyNvU5r2dQzTQyiZBItL2RJriYa2e868565873c519cc692d97e596e6533cE677DX9WQ7vNPDZTj_Ltwv8sQrEpv-rMOCspspzRSobv3-GRFgyDnid5WbV6ihKfcs3fNbI4vJe_dpidW68OYDhR6ejKQThWZW-H32v-9L5N6sBe7iDWlLpLCc71oaRt3ZdGQGsHfqSM3CEUK4BxhgP4PiroL50Xwnjj3YaIZFSzuepNMSW9eJJPqTwCjd1&amp;ci-process=originImage\" alt=\"bridge模式\" title=\"bridge模式\" /></p>\n<ul>\n<li>bridge 可以很好的实现容器的网络环境隔离，但是此模式下的容器不具有公有 ip, 会导致虚机与外界不能直接进行通信，虽然可以通过 NAT 模式中间代理实现通信，但是多有不便。\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\" /><label for=\"cbx_0\"> &lt;font face=' 黑体 ' color='red'&gt;TODO :NAT 模式介绍学习 &lt;/font&gt;</label></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"host模式\"><a class=\"anchor\" href=\"#host模式\">#</a> host 模式</h3>\n<blockquote>\n<p>host 模式是对 bridge 模式的补充，采用 host 模式的虚机可以直接借用宿主机的 IP 与外界进行通信</p>\n</blockquote>\n<p><img data-src=\"https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/DockerNetwork/host.jpg?q-sign-algorithm=sha1&amp;q-ak=AKIDnv55aSmgwEuS8deGFyITdoHmcgrmFp1dcJ1wDl6gd5wO0o6dvoSyOwWDTz-hF-Ih&amp;q-sign-time=1703502252;1703505852&amp;q-key-time=1703502252;1703505852&amp;q-header-list=host&amp;q-url-param-list=ci-process&amp;q-signature=94c5ef88a6011a91e3dea44aea229a70cd6b635b&amp;x-cos-security-token=5c6aDdyNvU5r2dQzTQyiZBItL2RJriYa96e2923ac2a58457998d3594df264956cE677DX9WQ7vNPDZTj_Lt-jC-zbw2C1u93h6RIHO9f6o2VhpHu11osrXGMXkQKkH8kBQaFHkELXy5I6w9um3K-tFHue9bPhUS3hnfkIdcDuLVNiRTK7LoTUyQeRGPp8E8lKMZ3s6QFN6Hhm4QiUYtoNrrWftLQV6AsNm3aGXzqy1xnSdYp2KEqeQ0wiWygPQ&amp;ci-process=originImage\" alt=\"host模式\" title=\"host模式\" /></p>\n<p>host 模式会占用宿主机的网络资源与端口资源，同一个端口，比如宿主机的 80 端口，只能被一个服务占用，如果被某个容器占用了，宿主机就不能用，后续的容器也不能用，直到优先抢到 80 端口的服务，停止提供服务（放弃 80 端口）</p>\n<h3 id=\"none模式\"><a class=\"anchor\" href=\"#none模式\">#</a> none 模式</h3>\n<blockquote>\n<p>此模式关闭了容器的网络功能，仅有独自的网络空间（一个空架子），并且该模式不会给容器分配任何网络资源，包括虚拟网卡、路由、防火墙、IP、网关、端口等</p>\n</blockquote>\n<h3 id=\"32剩余模式\"><a class=\"anchor\" href=\"#32剩余模式\">#</a> 3+2 剩余模式</h3>\n<p>除了上面提到的三种可以通 ls 命令查看的模式之外，docker 还支持其余两种模式，分别是 container 与自定义模式</p>\n<ul>\n<li>\n<p>container 模式</p>\n<blockquote>\n<p>它是 bridge 和 host 模式的合体，优先以 bridge 方式启动启动第一个容器，后面的所有容器启动时，均指定网络模式为 container，它们均共享第一个容器的网络资源，除了网络资源，其他资源，容器彼此之间依然是相互隔离的</p>\n</blockquote>\n</li>\n<li>\n<p>自定义模式</p>\n<p>docker 提供了三种自定义网络驱动分别是 bridge、overlay、macvlan，bridge 驱动类似默认的 bridge 网络模式，但增加了一些新的功能，overlay 和 macvlan 是用于创建跨主机网络</p>\n</li>\n</ul>\n<h2 id=\"命令记录\"><a class=\"anchor\" href=\"#命令记录\">#</a> 命令记录</h2>\n<p><figure class=\"highlight shell\"><figcaption><span>命令记录</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看docker容器的所有网络模式</span></span><br><span class=\"line\">docker network ls</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看哪些容器在该网络模式下</span></span><br><span class=\"line\">docker network inspect bridge</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查询容器网络模式</span></span><br><span class=\"line\">docker inspect &lt;container&gt; | grep NetworkMode</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "Docker",
                "Docker",
                "Network"
            ]
        }
    ]
}