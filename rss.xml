<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>スポンジ・ボブです</title>
        <subtitle></subtitle>
        <icon>http://weiboluo.top/images/favicon.ico</icon>
        <link>http://weiboluo.top</link>
        <author>
          <name>位菠萝</name>
        </author>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Tue, 26 Dec 2023 18:33:09 +0800</pubDate>
        <lastBuildDate>Tue, 26 Dec 2023 18:33:09 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">http://weiboluo.top/2023/12/26/dockerContainerMacVlan/</guid>
            <title>Docker容器使用Macvlan配置网络</title>
            <link>http://weiboluo.top/2023/12/26/dockerContainerMacVlan/</link>
            <category term="Docker" scheme="http://weiboluo.top/categories/Docker/" />
            <category term="Docker" scheme="http://weiboluo.top/tags/Docker/" />
            <category term="Network" scheme="http://weiboluo.top/tags/Network/" />
            <pubDate>Tue, 26 Dec 2023 18:33:09 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;简单了解Macvlan&#34;&gt;&lt;a href=&#34;#简单了解Macvlan&#34; class=&#34;headerlink&#34; title=&#34;简单了解Macvlan&#34;&gt;&lt;/a&gt;简单了解Macvlan&lt;/h2&gt;&lt;p&gt;:::primary&lt;br&gt;macvlan是一种网络虚拟化技术，它允许在一个物理网络接口上配置多个虚拟网络接口，简单的说macvlan类型类似于子接口，但是相对于子接口来说，macvlan的每个虚拟网络接口都有自己独立的 MAC 地址，并且可以配置上 IP 地址进行通信&lt;br&gt;:::&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询当前内核是否加载macvlan内核&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;查询驱动&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;lsmod | grep macvlan&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
++如果没有查询到，则可以手动载入，内核代码路径为&amp;#x2F;drivers&amp;#x2F;net&amp;#x2F;macvlan.c++&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;载入驱动&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;modprobe macvlan&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;macvlan四种模式&lt;ul&gt;
&lt;li&gt;vepa模式：各个子设备直接无法直接通信（可以通过支持端口聚合的交换机通信），可以和外部通信。&lt;/li&gt;
&lt;li&gt;private模式：和vepa模式类似，各个子设备之间无法通信，即使通过支持端口聚合的交换机也不能。&lt;/li&gt;
&lt;li&gt;bridge模式：各个子设备之间可以通信，通过虚拟桥接模式&lt;/li&gt;
&lt;li&gt;passthru模式：会接管父设备（网口），父设备不能接收数据包，并且每个父设备只允许存在一个macvlan设备&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;通过macvlan实现容器与外部主机通信&#34;&gt;&lt;a href=&#34;#通过macvlan实现容器与外部主机通信&#34; class=&#34;headerlink&#34; title=&#34;通过macvlan实现容器与外部主机通信&#34;&gt;&lt;/a&gt;通过macvlan实现容器与外部主机通信&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;网卡开启混杂模式&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;混杂模式&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#网卡开启混杂模式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ifconfig eno1 promisc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#网卡关闭混杂模式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ifconfig eno1 -promisc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt; &lt;img data-src=&#34;https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/DockerMacvlan/eno1.jpg&#34; title=&#34;eno1&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建macvlan网络模式&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;创建网络模式&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker network create -d macvlan --subnet=192.168.128.0/24 --gateway=192.168.128.2 -o parent=eth0 -o macvlan_mode=vepa vepamv &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;++–subnet为子网掩码CIDR格式++{.dot}&lt;/p&gt;
&lt;p&gt;++–gateway为网关++{.dot}&lt;/p&gt;
&lt;p&gt;++parent为网卡名称++{.dot}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建两个容器mac1与mac2&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;创建容器&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker run -itd --name mac1 --net=vepamv --ip=192.168.128.222 -v /sys/fs/cgroup:/sys/fs/cgroup --privileged=&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;  --restart=always  mac:latest /usr/sbin/init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;查看存在两mac地址&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;查看模式信息&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#查看网络模式信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker network inspect vepamv&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img data-src=&#34;https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/DockerMacvlan/vepamv.jpg&#34; title=&#34;vepamv&#34;&gt;&lt;/p&gt;
&lt;p&gt;mac1与mac2容器之间相互无法ping通，删除上述网络模式与容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建bridge模式的macvlan网络，重新新建mac1与mac2发现能够相互ping通&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://weiboluo.top/2023/12/25/dockerNetwork/</guid>
            <title>Docker网络模式介绍</title>
            <link>http://weiboluo.top/2023/12/25/dockerNetwork/</link>
            <category term="Docker" scheme="http://weiboluo.top/categories/Docker/" />
            <category term="Docker" scheme="http://weiboluo.top/tags/Docker/" />
            <category term="Network" scheme="http://weiboluo.top/tags/Network/" />
            <pubDate>Mon, 25 Dec 2023 18:33:09 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;Docker网络模式&#34;&gt;&lt;a href=&#34;#Docker网络模式&#34; class=&#34;headerlink&#34; title=&#34;Docker网络模式&#34;&gt;&lt;/a&gt;Docker网络模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Docker安装之后会自动创建三种基本网络，同时docker允许用户进行创建自己的网络配置从而使容器网络配置更加灵活&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Docker安装完成后可以使用docker network ls命令查询创建的网络模式,结果如下图会自动创建三种网络模式：bridge、host、none&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/DockerNetwork/BaseNetworkConfig.jpg&#34; title=&#34;网络模式&#34;&gt;&lt;/p&gt;
&lt;p&gt;同时Docker在启动时会开启一个虚拟的网桥设备docker0，并且会为其配置默认的地址172.17.0.1&amp;#x2F;16，后续所有的Docker容器启动后都会被桥接到docker0上面,并自动分配一个ip地址，我们可以用ip addr命令查询下详情信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/DockerNetwork/docker0.jpg&#34; title=&#34;虚拟设备docker0&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;bridge模式&#34;&gt;&lt;a href=&#34;#bridge模式&#34; class=&#34;headerlink&#34; title=&#34;bridge模式&#34;&gt;&lt;/a&gt;bridge模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;bridge网络模式下的容器没有公有ip，只有宿主机可以访问，而外部主机无法访问，但是可以通过配置NAT规则进行访问&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;bridge模式的实现依赖的是&lt;strong&gt;veth-pair&lt;/strong&gt;技术，veth-pair可以理解为在宿主机上面创建两个虚拟网络接口，通过技术特性保证无论哪个veth接收到网络报文都会传输给另一方&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如图，Docker Daemon将veth0附加到docker0创建的docker0设备上，同时将veth1添加到Docker Container所属的namespace上，改名为eth0&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/DockerNetwork/vethpair.jpg&#34; title=&#34;veth-pair&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;宿主机的网络报文若发往 veth0，则立即会被 eth0 接收，实现宿主机到Docker Container网络的联通性；同时，也保证 Docker Container 单独使用 eth0，实现容器网络环境的隔离性&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/DockerNetwork/bridge.jpg&#34; title=&#34;bridge模式&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bridge可以很好的实现容器的网络环境隔离，但是此模式下的容器不具有公有ip,会导致虚机与外界不能直接进行通信，虽然可以通过NAT模式中间代理实现通信，但是多有不便。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;font face=&#39;黑体&#39; color=&#39;red&#39;&gt;TODO :NAT模式介绍学习&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;host模式&#34;&gt;&lt;a href=&#34;#host模式&#34; class=&#34;headerlink&#34; title=&#34;host模式&#34;&gt;&lt;/a&gt;host模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;host模式是对bridge模式的补充，采用host模式的虚机可以直接借用宿主机的IP与外界进行通信&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  &lt;img data-src=&#34;/DockerNetworkMode/host.jpg&#34; alt=&#34;host模式&#34;&gt;&lt;/p&gt;
&lt;p&gt;host模式会占用宿主机的网络资源与端口资源，同一个端口，比如宿主机的80端口，只能被一个服务占用，如果被某个容器占用了，宿主机就不能用，后续的容器也不能用，直到优先抢到80端口的服务，停止提供服务（放弃80端口）&lt;/p&gt;
&lt;h3 id=&#34;none模式&#34;&gt;&lt;a href=&#34;#none模式&#34; class=&#34;headerlink&#34; title=&#34;none模式&#34;&gt;&lt;/a&gt;none模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;此模式关闭了容器的网络功能，仅有独自的网络空间（一个空架子），并且该模式不会给容器分配任何网络资源，包括虚拟网卡、路由、防火墙、IP、网关、端口等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3-2剩余模式&#34;&gt;&lt;a href=&#34;#3-2剩余模式&#34; class=&#34;headerlink&#34; title=&#34;3+2剩余模式&#34;&gt;&lt;/a&gt;3+2剩余模式&lt;/h3&gt;&lt;p&gt;除了上面提到的三种可以通ls命令查看的模式之外，docker还支持其余两种模式，分别是container与自定义模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;container模式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;它是bridge和host模式的合体，优先以bridge方式启动启动第一个容器，后面的所有容器启动时，均指定网络模式为container，它们均共享第一个容器的网络资源，除了网络资源，其他资源，容器彼此之间依然是相互隔离的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自定义模式&lt;/p&gt;
&lt;p&gt;docker 提供了三种自定义网络驱动分别是bridge、overlay、macvlan，bridge驱动类似默认的bridge网络模式，但增加了一些新的功能，overlay和macvlan是用于创建跨主机网络&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;命令记录&#34;&gt;&lt;a href=&#34;#命令记录&#34; class=&#34;headerlink&#34; title=&#34;命令记录&#34;&gt;&lt;/a&gt;命令记录&lt;/h2&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption&gt;&lt;span&gt;命令记录&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;查看docker容器的所有网络模式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker network ls&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;查看哪些容器在该网络模式下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker network inspect bridge&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;查询容器网络模式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker inspect &amp;lt;container&amp;gt; | grep NetworkMode&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
    </channel>
</rss>
