<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>スポンジ・ボブです</title>
        <subtitle></subtitle>
        <icon>http://weiboluo.top/images/favicon.ico</icon>
        <link>http://weiboluo.top</link>
        <author>
          <name>位菠萝</name>
        </author>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Mon, 25 Dec 2023 18:33:09 +0800</pubDate>
        <lastBuildDate>Mon, 25 Dec 2023 18:33:09 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">http://weiboluo.top/2023/12/25/dockerNetwork/</guid>
            <title>Docker网络模式介绍</title>
            <link>http://weiboluo.top/2023/12/25/dockerNetwork/</link>
            <category term="Docker" scheme="http://weiboluo.top/categories/Docker/" />
            <category term="Docker" scheme="http://weiboluo.top/tags/Docker/" />
            <category term="Network" scheme="http://weiboluo.top/tags/Network/" />
            <pubDate>Mon, 25 Dec 2023 18:33:09 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;docker网络模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker网络模式&#34;&gt;#&lt;/a&gt; Docker 网络模式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker 安装之后会自动创建三种基本网络，同时 docker 允许用户进行创建自己的网络配置从而使容器网络配置更加灵活&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;Docker 安装完成后可以使用 docker network ls 命令查询创建的网络模式，结果如下图会自动创建三种网络模式：bridge、host、none&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/DockerNetwork/BaseNetworkConfig.jpg?q-sign-algorithm=sha1&amp;amp;q-ak=AKIDWN0SbJrm57Z66Prz2tyITVb8EWLzpO9ZXIHoixT9wmv2IG6wOoFRrA8JMyTfZ4EB&amp;amp;q-sign-time=1703502188;1703505788&amp;amp;q-key-time=1703502188;1703505788&amp;amp;q-header-list=host&amp;amp;q-url-param-list=ci-process&amp;amp;q-signature=57e9f2ae426d50e065df8615f1a644cc700ec738&amp;amp;x-cos-security-token=5c6aDdyNvU5r2dQzTQyiZBItL2RJriYa090b214fddda78a937e80941c75094e9cE677DX9WQ7vNPDZTj_LtzQ_6b7kmN80JCuCSHM6Nm-lacDSMwfkBGizWLKqHZ__PPbc9-QMqhjReZQb21tfLkaiQks37oS94GPLBGwqpFRq-2RmLlempu_zl1CJA6UhQBRxXUUQYjed6xRJ4vK6JOoH7f0mdi_hfj90VBEEBiCZl2Zr99LzaqOB2f1GsD8r&amp;amp;ci-process=originImage&#34; alt=&#34;网络模式&#34; title=&#34;网络模式&#34; /&gt;&lt;/p&gt;
&lt;p&gt;同时 Docker 在启动时会开启一个虚拟的网桥设备 docker0，并且会为其配置默认的地址 172.17.0.1/16，后续所有的 Docker 容器启动后都会被桥接到 docker0 上面，并自动分配一个 ip 地址，我们可以用 ip addr 命令查询下详情信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/DockerNetwork/docker0.jpg?q-sign-algorithm=sha1&amp;amp;q-ak=AKIDuZufiGgOCkIYXtfRp5zn3Cvv14PC2RAqxf7xpFnyYunfy5OgvL1HsPZJLq2m96JX&amp;amp;q-sign-time=1703502214;1703505814&amp;amp;q-key-time=1703502214;1703505814&amp;amp;q-header-list=host&amp;amp;q-url-param-list=ci-process&amp;amp;q-signature=f0fd7eed6535a3ac149758ee2e9cbebb58103806&amp;amp;x-cos-security-token=5c6aDdyNvU5r2dQzTQyiZBItL2RJriYa8b73b89e942c62f07539ca70f27e6cb6cE677DX9WQ7vNPDZTj_Lt3zmm2f7QsDKI6DIgKut5oLSCENGcMI7eo_1lFOyY4B9DxylXxsMQtcH0eT82G3K1z0aRVLLGDDeOIEAOb4Aq6xXOBkuc7JEE9yHR6ZQ5TT3myj5XrZ8qbuKqA9SM4jhh8rRTK8rAcgxbz-0RQGaMSi6AeoYC0lk2ROTi-MZup8F&amp;amp;ci-process=originImage&#34; alt=&#34;虚拟设备docker0&#34; title=&#34;虚拟设备docker0&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;bridge模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bridge模式&#34;&gt;#&lt;/a&gt; bridge 模式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;bridge 网络模式下的容器没有公有 ip，只有宿主机可以访问，而外部主机无法访问，但是可以通过配置 NAT 规则进行访问&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;bridge 模式的实现依赖的是&lt;strong&gt; veth-pair&lt;/strong&gt; 技术，veth-pair 可以理解为在宿主机上面创建两个虚拟网络接口，通过技术特性保证无论哪个 veth 接收到网络报文都会传输给另一方&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如图，Docker Daemon 将 veth0 附加到 docker0 创建的 docker0 设备上，同时将 veth1 添加到 Docker Container 所属的 namespace 上，改名为 eth0&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/DockerNetwork/vethpair.jpg?q-sign-algorithm=sha1&amp;amp;q-ak=AKIDp2r0yTy8N9Js3-UEX607Ok9wQr9D8MmVC-fdeohiZ0Qa7_e7oTTWx2bhLH0SEoRd&amp;amp;q-sign-time=1703502228;1703505828&amp;amp;q-key-time=1703502228;1703505828&amp;amp;q-header-list=host&amp;amp;q-url-param-list=ci-process&amp;amp;q-signature=e34627ab6c3464ce4571e1de9cceb4e70d2ef94a&amp;amp;x-cos-security-token=5c6aDdyNvU5r2dQzTQyiZBItL2RJriYa9cad0a98dc19b8185e101ff5f27eb6edcE677DX9WQ7vNPDZTj_Lt4tIS0pV1hUwsD9c1Gmx8me_1DNW2w1RbJcrU6pOiBqs0ByPFMZpVcvYr8LgQJ-TjdSMkRnBkr05sVTRHE6uijIOV85glol1gv44kDCAk4dDjTK4BKrdNSl6TebioIpfdiaLd0mBgKr-DOk-1C48nWqs-3lhTIAIoU5xM82j5ZSS&amp;amp;ci-process=originImage&#34; alt=&#34;veth-pair&#34; title=&#34;veth-pair&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;宿主机的网络报文若发往 veth0，则立即会被 eth0 接收，实现宿主机到 Docker Container 网络的联通性；同时，也保证 Docker Container 单独使用 eth0，实现容器网络环境的隔离性&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/DockerNetwork/bridge.jpg?q-sign-algorithm=sha1&amp;amp;q-ak=AKID1Wn-KGWw9QlnYWImMeeqekn7-g3Lt5E8BRA0CW8TZ2XpEOhO3b-YvVitVLkAtKo1&amp;amp;q-sign-time=1703502238;1703505838&amp;amp;q-key-time=1703502238;1703505838&amp;amp;q-header-list=host&amp;amp;q-url-param-list=ci-process&amp;amp;q-signature=4488481f914de5d0af457433dc4e06bb0743f93f&amp;amp;x-cos-security-token=5c6aDdyNvU5r2dQzTQyiZBItL2RJriYa2e868565873c519cc692d97e596e6533cE677DX9WQ7vNPDZTj_Ltwv8sQrEpv-rMOCspspzRSobv3-GRFgyDnid5WbV6ihKfcs3fNbI4vJe_dpidW68OYDhR6ejKQThWZW-H32v-9L5N6sBe7iDWlLpLCc71oaRt3ZdGQGsHfqSM3CEUK4BxhgP4PiroL50Xwnjj3YaIZFSzuepNMSW9eJJPqTwCjd1&amp;amp;ci-process=originImage&#34; alt=&#34;bridge模式&#34; title=&#34;bridge模式&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bridge 可以很好的实现容器的网络环境隔离，但是此模式下的容器不具有公有 ip, 会导致虚机与外界不能直接进行通信，虽然可以通过 NAT 模式中间代理实现通信，但是多有不便。
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_0&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_0&#34;&gt; &amp;lt;font face=&#39; 黑体 &#39; color=&#39;red&#39;&amp;gt;TODO :NAT 模式介绍学习 &amp;lt;/font&amp;gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;host模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#host模式&#34;&gt;#&lt;/a&gt; host 模式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;host 模式是对 bridge 模式的补充，采用 host 模式的虚机可以直接借用宿主机的 IP 与外界进行通信&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wbl-1302681813.cos.ap-nanjing.myqcloud.com/DockerNetwork/host.jpg?q-sign-algorithm=sha1&amp;amp;q-ak=AKIDnv55aSmgwEuS8deGFyITdoHmcgrmFp1dcJ1wDl6gd5wO0o6dvoSyOwWDTz-hF-Ih&amp;amp;q-sign-time=1703502252;1703505852&amp;amp;q-key-time=1703502252;1703505852&amp;amp;q-header-list=host&amp;amp;q-url-param-list=ci-process&amp;amp;q-signature=94c5ef88a6011a91e3dea44aea229a70cd6b635b&amp;amp;x-cos-security-token=5c6aDdyNvU5r2dQzTQyiZBItL2RJriYa96e2923ac2a58457998d3594df264956cE677DX9WQ7vNPDZTj_Lt-jC-zbw2C1u93h6RIHO9f6o2VhpHu11osrXGMXkQKkH8kBQaFHkELXy5I6w9um3K-tFHue9bPhUS3hnfkIdcDuLVNiRTK7LoTUyQeRGPp8E8lKMZ3s6QFN6Hhm4QiUYtoNrrWftLQV6AsNm3aGXzqy1xnSdYp2KEqeQ0wiWygPQ&amp;amp;ci-process=originImage&#34; alt=&#34;host模式&#34; title=&#34;host模式&#34; /&gt;&lt;/p&gt;
&lt;p&gt;host 模式会占用宿主机的网络资源与端口资源，同一个端口，比如宿主机的 80 端口，只能被一个服务占用，如果被某个容器占用了，宿主机就不能用，后续的容器也不能用，直到优先抢到 80 端口的服务，停止提供服务（放弃 80 端口）&lt;/p&gt;
&lt;h3 id=&#34;none模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#none模式&#34;&gt;#&lt;/a&gt; none 模式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;此模式关闭了容器的网络功能，仅有独自的网络空间（一个空架子），并且该模式不会给容器分配任何网络资源，包括虚拟网卡、路由、防火墙、IP、网关、端口等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;32剩余模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32剩余模式&#34;&gt;#&lt;/a&gt; 3+2 剩余模式&lt;/h3&gt;
&lt;p&gt;除了上面提到的三种可以通 ls 命令查看的模式之外，docker 还支持其余两种模式，分别是 container 与自定义模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;container 模式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;它是 bridge 和 host 模式的合体，优先以 bridge 方式启动启动第一个容器，后面的所有容器启动时，均指定网络模式为 container，它们均共享第一个容器的网络资源，除了网络资源，其他资源，容器彼此之间依然是相互隔离的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自定义模式&lt;/p&gt;
&lt;p&gt;docker 提供了三种自定义网络驱动分别是 bridge、overlay、macvlan，bridge 驱动类似默认的 bridge 网络模式，但增加了一些新的功能，overlay 和 macvlan 是用于创建跨主机网络&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;命令记录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令记录&#34;&gt;#&lt;/a&gt; 命令记录&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption&gt;&lt;span&gt;命令记录&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;查看docker容器的所有网络模式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker network ls&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;查看哪些容器在该网络模式下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker network inspect bridge&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;查询容器网络模式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker inspect &amp;lt;container&amp;gt; | grep NetworkMode&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
