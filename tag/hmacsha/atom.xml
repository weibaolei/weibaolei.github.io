<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>スポンジ・ボブです • Posts by &#34;hmacsha&#34; tag</title>
    <link href="http://example.com" />
    <updated>2022-01-04T10:54:28.000Z</updated>
    <category term="JAVA" />
    <category term="HmacSHA" />
    <category term="VUE" />
    <category term="VMware" />
    <category term="Linux" />
    <category term="Element" />
    <category term="Bug" />
    <category term="网络" />
    <entry>
        <id>http://example.com/2022/01/04/HmacSHA256%E4%BD%BF%E7%94%A8%E5%AE%8C%E6%88%90%E7%AD%BE%E5%90%8D%E8%AE%A4%E8%AF%81/</id>
        <title>HmacSHA256使用完成签名认证</title>
        <link rel="alternate" href="http://example.com/2022/01/04/HmacSHA256%E4%BD%BF%E7%94%A8%E5%AE%8C%E6%88%90%E7%AD%BE%E5%90%8D%E8%AE%A4%E8%AF%81/"/>
        <content type="html">&lt;ol&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在业务中我想将某些业务功能放开到白名单中，这样使用的时候就需要用户额外登录，但是直接放开到白名单中可能会存在安全隐患，尤其是其中国有部分业务涉及到数据库的操作，因此我的想法是在前端的请求头中添加一个签名，在后端添加一个 Filter 来校验签名是否正确，在这里选择的是 HmacSHA256 的签名加密方法。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;前端代码&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;由于业务逻辑较为简单，因此我的签名校验只包含一个时间以及随机数来确保前端请求是来自合法的网站就行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装依赖&lt;/strong&gt;&lt;/p&gt;
  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm install crypto-js&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;引入依赖&lt;/strong&gt;&lt;/p&gt;
  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import CryptoJS from &amp;quot;crypto-js&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在封装 axios 的 js 文件中为 headers 添加三个属性&lt;/strong&gt;&lt;/p&gt;
  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import axios from &amp;quot;axios&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const instance = axios.create(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    baseURL: &amp;#x27;/&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    timeout: 6000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance.defaults.headers.common[&amp;#x27;valid_time&amp;#x27;] = &amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance.defaults.headers.common[&amp;#x27;valid_random&amp;#x27;] = &amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance.defaults.headers.common[&amp;#x27;valid_sign&amp;#x27;] = &amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在前端实际业务请求前设置参数&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其中 secretKey 为密钥，需前后端一致，在前段的请求头中添加参数&lt;/p&gt;
&lt;/blockquote&gt;
  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;let that = this;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let headers = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;headers.valid_time = new Date().getTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;headers.valid_random = that.getRandomInt(10000);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let hash = CryptoJS.HmacSHA256(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    headers.valid_time + &amp;quot;&amp;quot; + headers.valid_random,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    that.secretKey&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;).toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;headers.valid_sign = hash;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;that.postRequest(url,param,&amp;#123; headers: headers &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;后端代码&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;后端代码添加 Filter 类来验证需要签名的路径&lt;/strong&gt;&lt;/p&gt;
  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@Slf4j&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@WebFilter(filterName = &amp;quot;signFilter&amp;quot;,urlPatterns = &amp;#123;&amp;quot;demo/first&amp;quot;,&amp;quot;demo/sec&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public class SignFilter implements Filter &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    /**签名生成器，将前端带来的时间与随机数用秘钥加密*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    private String hmacSHA256(String secretKey, String plain)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String hash = &amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Mac sha256_HMAC = Mac.getInstance(&amp;quot;HmacSHA256&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            SecretKeySpec secret_key = new SecretKeySpec(secretKey.getBytes(), &amp;quot;HmacSHA256&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            sha256_HMAC.init(secret_key);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            byte[] bytes = sha256_HMAC.doFinal(plain.getBytes());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            hash = byteArrayToHexString(bytes);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&amp;quot;Error HmacSHA256 ===========&amp;quot; + e.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return hash;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    private  String byteArrayToHexString(byte[] b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        StringBuilder hs = new StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String stmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int n = 0; b != null &amp;amp;&amp;amp; n &amp;lt; b.length; n++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            stmp = Integer.toHexString(b[n] &amp;amp; 0XFF);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (stmp.length() == 1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                hs.append(&amp;#x27;0&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            hs.append(stmp);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return hs.toString().toUpperCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain) throws IOException, ServletException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        HttpServletRequest request = (HttpServletRequest) servletRequest;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        HttpServletResponse response= (HttpServletResponse) servletResponse;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String requestUrl = request.getRequestURI();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        /*获取请求头中的参数*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String time = request.getHeader(this.VALID_TIME);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String random = request.getHeader(this.VALID_RANDOM);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String sign = request.getHeader(this.VALID_SIGN);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        /*编写实际校验代码*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;注意事项&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在使用 @WebFilter (filterName = “signFilter”,urlPatterns = {“demo/first”,&amp;quot;demo/sec}) 的时候，有时候会出现 urlPatterns 属性失效的情况，可能由于 filterName 属性首字母大写引起的，改为小写。&lt;/p&gt;
</content>
        <category term="JAVA" />
        <category term="HmacSHA" />
        <updated>2022-01-04T10:54:28.000Z</updated>
    </entry>
</feed>
