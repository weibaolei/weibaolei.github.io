{
    "version": "https://jsonfeed.org/version/1",
    "title": "スポンジ・ボブです • All posts by \"hmacsha\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/01/04/HmacSHA256%E4%BD%BF%E7%94%A8%E5%AE%8C%E6%88%90%E7%AD%BE%E5%90%8D%E8%AE%A4%E8%AF%81/",
            "url": "http://example.com/2022/01/04/HmacSHA256%E4%BD%BF%E7%94%A8%E5%AE%8C%E6%88%90%E7%AD%BE%E5%90%8D%E8%AE%A4%E8%AF%81/",
            "title": "HmacSHA256使用完成签名认证",
            "date_published": "2022-01-04T10:54:28.000Z",
            "content_html": "<ol>\n<li>背景</li>\n</ol>\n<p>在业务中我想将某些业务功能放开到白名单中，这样使用的时候就需要用户额外登录，但是直接放开到白名单中可能会存在安全隐患，尤其是其中国有部分业务涉及到数据库的操作，因此我的想法是在前端的请求头中添加一个签名，在后端添加一个 Filter 来校验签名是否正确，在这里选择的是 HmacSHA256 的签名加密方法。</p>\n<ol start=\"2\">\n<li>前端代码</li>\n</ol>\n<blockquote>\n<p>由于业务逻辑较为简单，因此我的签名校验只包含一个时间以及随机数来确保前端请求是来自合法的网站就行。</p>\n</blockquote>\n<ul>\n<li>\n<p><strong>安装依赖</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install crypto-js</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>引入依赖</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import CryptoJS from &quot;crypto-js&quot;;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>在封装 axios 的 js 文件中为 headers 添加三个属性</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import axios from &quot;axios&quot;;</span><br><span class=\"line\">const instance = axios.create(&#123;</span><br><span class=\"line\">    baseURL: &#x27;/&#x27;,</span><br><span class=\"line\">    timeout: 6000</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">instance.defaults.headers.common[&#x27;valid_time&#x27;] = &quot;&quot;;</span><br><span class=\"line\">instance.defaults.headers.common[&#x27;valid_random&#x27;] = &quot;&quot;;</span><br><span class=\"line\">instance.defaults.headers.common[&#x27;valid_sign&#x27;] = &quot;&quot;;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>在前端实际业务请求前设置参数</strong></p>\n<blockquote>\n<p>其中 secretKey 为密钥，需前后端一致，在前段的请求头中添加参数</p>\n</blockquote>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let that = this;</span><br><span class=\"line\">let headers = &#123;&#125;;</span><br><span class=\"line\">headers.valid_time = new Date().getTime();</span><br><span class=\"line\">headers.valid_random = that.getRandomInt(10000);</span><br><span class=\"line\">let hash = CryptoJS.HmacSHA256(</span><br><span class=\"line\">    headers.valid_time + &quot;&quot; + headers.valid_random,</span><br><span class=\"line\">    that.secretKey</span><br><span class=\"line\">).toString();</span><br><span class=\"line\">headers.valid_sign = hash;</span><br><span class=\"line\">that.postRequest(url,param,&#123; headers: headers &#125;)</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"3\">\n<li>后端代码</li>\n</ol>\n<ul>\n<li>\n<p><strong>后端代码添加 Filter 类来验证需要签名的路径</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Slf4j</span><br><span class=\"line\">@WebFilter(filterName = &quot;signFilter&quot;,urlPatterns = &#123;&quot;demo/first&quot;,&quot;demo/sec&#125;)</span><br><span class=\"line\">public class SignFilter implements Filter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**签名生成器，将前端带来的时间与随机数用秘钥加密*/</span><br><span class=\"line\">    private String hmacSHA256(String secretKey, String plain)&#123;</span><br><span class=\"line\">        String hash = &quot;&quot;;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Mac sha256_HMAC = Mac.getInstance(&quot;HmacSHA256&quot;);</span><br><span class=\"line\">            SecretKeySpec secret_key = new SecretKeySpec(secretKey.getBytes(), &quot;HmacSHA256&quot;);</span><br><span class=\"line\">            sha256_HMAC.init(secret_key);</span><br><span class=\"line\">            byte[] bytes = sha256_HMAC.doFinal(plain.getBytes());</span><br><span class=\"line\">            hash = byteArrayToHexString(bytes);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            System.out.println(&quot;Error HmacSHA256 ===========&quot; + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return hash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private  String byteArrayToHexString(byte[] b) &#123;</span><br><span class=\"line\">        StringBuilder hs = new StringBuilder();</span><br><span class=\"line\">        String stmp;</span><br><span class=\"line\">        for (int n = 0; b != null &amp;&amp; n &lt; b.length; n++) &#123;</span><br><span class=\"line\">            stmp = Integer.toHexString(b[n] &amp; 0XFF);</span><br><span class=\"line\">            if (stmp.length() == 1) &#123;</span><br><span class=\"line\">                hs.append(&#x27;0&#x27;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            hs.append(stmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return hs.toString().toUpperCase();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class=\"line\">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class=\"line\">        HttpServletResponse response= (HttpServletResponse) servletResponse;</span><br><span class=\"line\">        String requestUrl = request.getRequestURI();</span><br><span class=\"line\">        /*获取请求头中的参数*/</span><br><span class=\"line\">        String time = request.getHeader(this.VALID_TIME);</span><br><span class=\"line\">        String random = request.getHeader(this.VALID_RANDOM);</span><br><span class=\"line\">        String sign = request.getHeader(this.VALID_SIGN);</span><br><span class=\"line\">        /*编写实际校验代码*/</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"4\">\n<li>注意事项</li>\n</ol>\n<p>在使用 @WebFilter (filterName = “signFilter”,urlPatterns = {“demo/first”,&quot;demo/sec}) 的时候，有时候会出现 urlPatterns 属性失效的情况，可能由于 filterName 属性首字母大写引起的，改为小写。</p>\n",
            "tags": [
                "JAVA",
                "HmacSHA"
            ]
        }
    ]
}