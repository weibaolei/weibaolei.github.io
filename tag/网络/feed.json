{
    "version": "https://jsonfeed.org/version/1",
    "title": "スポンジ・ボブです • All posts by \"网络\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/02/08/%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82CloseableHttpAsyncClient%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "http://example.com/2022/02/08/%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82CloseableHttpAsyncClient%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "异步请求CloseableHttpAsyncClient的使用",
            "date_published": "2022-02-08T10:33:09.000Z",
            "content_html": "<h3 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h3>\n<p>最近项目有个小需求，需要发送短信验证码，而我们用的短信发送平台是由其他机构提供的，我们只能通过请求前置机并由前置机进行 nginx 转发来调用实际短信平台的 WebService 服务。<br>\n由于验证码不会影响业务逻辑，因此我这里开始采用的时异步 http 请求，也就是使用的 httpclient 在 4.0 后提供新的 api CloseableHttpAsyncClient。</p>\n<h3 id=\"关于网络调用类型\"><a class=\"markdownIt-Anchor\" href=\"#关于网络调用类型\">#</a> 关于网络调用类型</h3>\n<ol>\n<li>传统 BIO<br>\n 同步阻塞式 IO，一个连接一个线程，客户端有连接请求时服务器端就需要启动一个线程进行处理</li>\n<li>NIO(NOT-Blocking IO)<br>\n 同步非阻塞式 IO，一个请求一个线程</li>\n<li>AIO<br>\n 异步非阻塞式 IO，服务器实现模式为一个有效请求一个线程</li>\n</ol>\n<h3 id=\"closeablehttpasyncclient的使用\"><a class=\"markdownIt-Anchor\" href=\"#closeablehttpasyncclient的使用\">#</a> CloseableHttpAsyncClient 的使用</h3>\n<blockquote>\n<p>CloseableHttpAsyncClient 是 apache 在 4.0 后提供 AIO 操作的 api</p>\n</blockquote>\n<ol>\n<li>pom 引入 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\"> &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class=\"line\"> &lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class=\"line\"> &lt;version&gt;4.5.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\"> &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class=\"line\"> &lt;artifactId&gt;httpcore&lt;/artifactId&gt;</span><br><span class=\"line\"> &lt;version&gt;4.4.5&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\"> &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class=\"line\"> &lt;artifactId&gt;httpcore-nio&lt;/artifactId&gt;</span><br><span class=\"line\"> &lt;version&gt;4.4.5&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\"> &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class=\"line\"> &lt;artifactId&gt;httpasyncclient&lt;/artifactId&gt;</span><br><span class=\"line\"> &lt;version&gt;4.1.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n</li>\n<li>定义 AsynHttpClient 类</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.dhc.leapower.business.rygl.utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.http.client.config.RequestConfig;</span><br><span class=\"line\">import org.apache.http.client.methods.HttpPost;</span><br><span class=\"line\">import org.apache.http.entity.ContentType;</span><br><span class=\"line\">import org.apache.http.entity.StringEntity;</span><br><span class=\"line\">import org.apache.http.impl.nio.client.CloseableHttpAsyncClient;</span><br><span class=\"line\">import org.apache.http.impl.nio.client.HttpAsyncClients;</span><br><span class=\"line\">import org.apache.http.impl.nio.conn.PoolingNHttpClientConnectionManager;</span><br><span class=\"line\">import org.apache.http.impl.nio.reactor.DefaultConnectingIOReactor;</span><br><span class=\"line\">import org.apache.http.impl.nio.reactor.IOReactorConfig;</span><br><span class=\"line\">import org.apache.http.nio.reactor.ConnectingIOReactor;</span><br><span class=\"line\">import org.apache.http.nio.reactor.IOReactorException;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author baolei.wei</span><br><span class=\"line\"> * @title: AsynHttpClient</span><br><span class=\"line\"> * @projectName leapower-business-rygl</span><br><span class=\"line\"> * @description:</span><br><span class=\"line\"> * @date 2022/1/24 12:55</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class AsynHttpClient &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static CloseableHttpAsyncClient client = null;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static CloseableHttpAsyncClient getHttpClient() &#123;</span><br><span class=\"line\">        if (client == null) &#123;</span><br><span class=\"line\">            synchronized (AsynHttpClient.class) &#123;</span><br><span class=\"line\">                if (client == null) &#123;</span><br><span class=\"line\">                    RequestConfig requestConfig = RequestConfig.custom()</span><br><span class=\"line\">                            //连接超时,连接建立时间,三次握手完成时间</span><br><span class=\"line\">                            .setConnectTimeout(2000)</span><br><span class=\"line\">                            //请求超时,数据传输过程中数据包之间间隔的最大时间</span><br><span class=\"line\">                            .setSocketTimeout(2000)</span><br><span class=\"line\">                            //使用连接池来管理连接,从连接池获取连接的超时时间</span><br><span class=\"line\">                            .setConnectionRequestTimeout(20000)</span><br><span class=\"line\">                            .build();</span><br><span class=\"line\"></span><br><span class=\"line\">                    //配置io线程</span><br><span class=\"line\">                    IOReactorConfig ioReactorConfig = IOReactorConfig.custom().</span><br><span class=\"line\">                            setIoThreadCount(Runtime.getRuntime().availableProcessors())</span><br><span class=\"line\">                            .setSoKeepAlive(true)</span><br><span class=\"line\">                            .build();</span><br><span class=\"line\">                    //设置连接池大小</span><br><span class=\"line\">                    ConnectingIOReactor ioReactor = null;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        ioReactor = new DefaultConnectingIOReactor(ioReactorConfig);</span><br><span class=\"line\">                    &#125; catch (IOReactorException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    PoolingNHttpClientConnectionManager connManager = new PoolingNHttpClientConnectionManager(ioReactor);</span><br><span class=\"line\">                    //最大连接数设置1</span><br><span class=\"line\">                    connManager.setMaxTotal(5);</span><br><span class=\"line\">                    //per route最大连接数设置</span><br><span class=\"line\">                    connManager.setDefaultMaxPerRoute(5);</span><br><span class=\"line\"></span><br><span class=\"line\">                    client = HttpAsyncClients.custom()</span><br><span class=\"line\">                            .setConnectionManager(connManager)</span><br><span class=\"line\">                            .setDefaultRequestConfig(requestConfig)</span><br><span class=\"line\">                            .build();</span><br><span class=\"line\">                    client.start();</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return client;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static HttpPost getPostBody(String urls, String bodys, ContentType contentType) &#123;</span><br><span class=\"line\">        HttpPost post = null;</span><br><span class=\"line\">        StringEntity entity = null;</span><br><span class=\"line\">        post = new HttpPost(urls);</span><br><span class=\"line\">        entity = new StringEntity(bodys, contentType);</span><br><span class=\"line\">        post.setEntity(entity);</span><br><span class=\"line\">        return post;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>实际应用</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 生成验证码</span><br><span class=\"line\"> */</span><br><span class=\"line\">@ApiOperation(value = &quot;新建&quot;, notes = &quot;&quot;)</span><br><span class=\"line\">@RequestMapping(value = &quot;/create&quot;, method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)</span><br><span class=\"line\">public RestDTO&lt;Void&gt; create(@RequestBody JSONObject tel) &#123;</span><br><span class=\"line\">    String code = this.identifyingCode(6);</span><br><span class=\"line\">    //像手机发送验证码</span><br><span class=\"line\">    CloseableHttpAsyncClient httpClient = AsynHttpClient.getHttpClient();</span><br><span class=\"line\">    //短信平台前置机的ip与WebService 服务方法</span><br><span class=\"line\">    String url = &quot;http://127.0.0.1:60001/login&quot;;</span><br><span class=\"line\">    JSONObject parameter = new JSONObject();</span><br><span class=\"line\"></span><br><span class=\"line\">    parameter.put(&quot;accountName&quot;,&quot;admin&quot;);</span><br><span class=\"line\">    parameter.put(&quot;password&quot;,&quot;123456&quot;);</span><br><span class=\"line\">    String stringBody = JSONObject.toJSONString(parameter);</span><br><span class=\"line\"></span><br><span class=\"line\">    HttpPost httpPost = new HttpPost(url);</span><br><span class=\"line\">    StringEntity entity = new StringEntity(stringBody, ContentType.APPLICATION_JSON);</span><br><span class=\"line\">    httpPost.setEntity(entity);</span><br><span class=\"line\"></span><br><span class=\"line\">    FutureCallback&lt;HttpResponse&gt; callback = new FutureCallback&lt;HttpResponse&gt;() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void completed(HttpResponse result) &#123;</span><br><span class=\"line\">            HttpEntity entity = result.getEntity();</span><br><span class=\"line\">            InputStream stream = null;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                stream = entity.getContent();</span><br><span class=\"line\">            &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            String string = changeInputStream(stream, &quot;utf-8&quot;);</span><br><span class=\"line\">            System.out.println(&quot;-----------&quot; + string + &quot;-----------&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void failed(Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            System.err.println(&quot;失败：&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void cancelled() &#123;</span><br><span class=\"line\">            System.err.println(&quot;cancelled&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    httpClient.execute(httpPost,callback);</span><br><span class=\"line\">    verificationCodeCacheService.add(tel.get(&quot;tel&quot;).toString(),code);</span><br><span class=\"line\">    return RestDTO.success();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "网络"
            ]
        }
    ]
}